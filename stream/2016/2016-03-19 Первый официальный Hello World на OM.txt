Первый официальный Hello World на OM

Не считая того, что мы понаписывали на нем кучу логик. Сегодня будет
демонстрация эффектов ОМ, т.е. копать будем не глубже System F:

$ cat Morte/recursive
#IO/replicateM #Nat/Five
               (#IO/[>>=] #IO/data #Unit/@
                          #IO/getLine
                          #IO/putLine)

Напоминаю что такое IO и [>>=] (в Хаскель эквиваленте), поставляется с базовой
библиотекой ОМ:

      #IO/data : #String = #List #Nat

data IO r = PutStrLn String (IO r)
          | GetLine (String -> IO r)
          | Return r

     (>>=) :: IO a -> (a -> IO b) -> IO b
     PutStrLn str io >>= f = PutStrLn str (io >>= f)
     GetLine k       >>= f = GetLine (\str -> k str >>= f)
     Return r        >>= f = f r

компиляция в Erlang:

> om:extract("priv/normal/Morte").

Для запуска этой монадки нам нужны индуктивные биндинги, т.е. внешние эффекты в
виде функций. Ну и передать их как параметры в скомпилированный терм:

pure() -> fun(IO) -> IO end.
getLine() -> fun(IO) -> fun(_) -> L = ch:list(io:get_line("> ")), ch:ap(IO,[L])
end end.
putLine() -> fun(S) -> fun(IO) -> io:format(": "), io:put_chars(ch:unlist(S)),
ch:ap(IO,[S]) end end.

ma() -> ap('Morte':recursive(),[getLine(),putLine(),pure(),ch:nil()]).

Запускаем:

> ch:ma().
> 1
: 1
> 2
: 2
> 3
: 3
> 4
: 4
> 5
: 5
#Fun

Вы только что посмтрели самый чистейший биндинг эффектов из возможных.

