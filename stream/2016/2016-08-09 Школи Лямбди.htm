<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2016-08-09</title>
    <link rel="stylesheet" href="../../blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2016-08-09</a>
</nav>
<main>
    <section>
        <h3>Лямбда Синтаксиси</h3>

<p>У цій публікації я хочу зібрати всі лямбда-синтаксиси. Почну з відомих синтаксисів лямбди:</p>

        <p> λ x . B x            — нетипізований класичний<br>
            λ x : A , B x        — в наукових статтях<br>
            λ (x: A) → B x       — Morte, Henk<br>
            λ (x: A) , B x       — Lean<br>
            (x: A) B x           — LISP синтаксис<br>
            [x: A] B(x)          — AUTOMATH<br>
            fun (x: A) => B x    — мови програмування, французька школа<br>
            fun (X) -> B(X)      — Erlang</p>


<p>Классика використовується учнями, які розв'язують домашні завдання, у вікіпедії та в HOL/Isabelle.
   Другий синтаксис використовується в статтях по лямбда-численню, наприклад, Streicher використовує
   його, третій також часто використовується в статтях, наприклад, Pfenning. Синтаксис LISP був
   винайдений Диб'єром у його роботі про індуктивні сімейства. Але все це вірації AUTOMATH,
   де є [], що є там квантором. Є ще логічний синтаксис правил висновку, запропонований
   Макбрайдом в Епіграмі, але це, на мій погляд, занадто. Синтаксис, який використовується
   в сучасних мовах програмування, також включений, сюди максимально, тому що на ньому
   незручно писати статті. Ми вибрали як синтаксис обчислення лямбда в Henk той, де є і
   дужки, і стрілки. Ми будуємо нормальні лямбда-форми вертикально, як це робив Диб’єр,
   щоб побачити шаблон і глибину термів.</p>

<p>Окремо хотілося б відзначити сімейство синтаксису Caramel, автором якого є Maia Victor,
   нажаль файли Карамелі похоронені під майстер гілкою, але я знайшов. Цей синтаксис також
   використовувався в оглядовій статті про лямбда-кодування 
   <a href="https://tonpa.guru/stream/2016/2016-11-29%20%D0%9B%D1%8F%D0%BC%D0%B1%D0%B4%D0%B0%20%D0%9A%D0%BE%D0%B4%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F.htm">CPS-кодування з континуатором</a>.</p>

            <figure><code>
 cons  = (x list cons nil -> (cons x (list cons nil)))
 nil   = (cons nil -> (id nil))
 foldr = (cons nil list -> (list cons nil))
 seq   = (foldr comp id)
 do    = (comp seq reverse)
 take  = (n -> (n (r l -> (cons (head l) (r (tail l)))) (const nil)))
            </code></figure>

<P>Як виглядають індуктивні типи можна умовно розділити на британську школу LCF/ML/HOL/Hope/Miranda/Haskell/Agda/Idris та американську школу LISP/ACL2/NuPRL/Lean.</p>
        <figure><code>
 data List (A : Set) : Set where
      []  : List A
      _∷_ : (x : A) (xs : List A) → List A

 data List (A: *): * :=
      (Nil: List A)
      (Cons: A → List A → List A)

 data List (A: U): U :=
      nil
    | cons (x: A) (xs: List A)

 data List : (A: Type) -> Type
    | nil  : Nat
    | cons : (x:A, xs: List(A)) -> Nat
        </code></figure>
    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>

