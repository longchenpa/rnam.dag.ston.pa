<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2018-12-29</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2018-12-29</a>
</nav>
<main>
    <section>

        <h3>Кубики</h3>

        <p> Меня просили написать две статьи: одну &mdash; обзор на новый кубик от JetBrains, Arend,
            а вторую для канала <a href="https://t.me/formalphilosophy">Формальная Философия</a>. Поскольку кубики напрямую касаются формальной философии,
            я решил объединить, и дать не только обозрение на Arend, но и на все кубики.</p>

        <p> Если предыдущая статья была об имплементации N2O на все языки, то эта статья
            будет об имплементации базовой библиотеки Групоид Инфинити на все кубические тайпчекеры.
            Пока их не много, но их количество стремительно увеличивается.
            В этом месяце мне посчастливилось портировать код
<a href="https://tonpa.guru/stream/2018/2018-06-09%20Формальная%20модель%20MLTT%20встроенная%20в%20теорию%20типов.htm">Выпуска 1. Встраивание MLTT в тайп чекер</a>,
            на новый прувер Arend от JetBrains.</p>

        <h4>Виды кубиков</h4>

        <p> Кубиками будем называть тайпчекеры которые реализуют кубическую теорию типов.
            Я главным образом определяю кубики по Воеводскому, как систему с двумя лямбдами.
            Если добавить в кубик линейные типы, получится система с тремя лямбдами.
            Систему со скольки лямбдами вы можете придумать? Спектральная лямбда-система?</p>

        <p> Начнём с описания всех пяти флейворов кубических имплементаций.
            Тут в генеалогии прослеживается две главные ветки,
            одна берет свое начало от пейпера
            <a href="http://www.cse.chalmers.se/~coquand/mod1.pdf">BCH</a><sup><a href="#1">1</a></sup>,
            который формально давал вычислительную модель
            <a href="https://arxiv.org/pdf/1611.02108.pdf">CCHM</a><sup><a href="#2">2</a></sup>,
            имплементированную в Хаскеле как cubicaltt. Вторая линия &mdash; это декартовая кубическая теория,
            которя была опубликована в
            <a href="https://guillaumebrunerie.github.io/pdf/cart-cube.pdf">ABCFHL</a><sup><a href="#3">3</a></sup>
            и <a href="https://www.cs.cmu.edu/~cangiuli/papers/ccctt.pdf">AFH</a><sup><a href="#4">4</a></sup>
            пейперах, и мплементирована как RedPRL (SML), redtt (OCaml), yacctt (Haskell), и Arend (Java).</p>

        <p> 1. cubicaltt: \(i: I)->, i @ x, сomp, /\, \/, ~, Glue, glue, unglue;<br>
            2. yacctt: \(i: I)->, i @ x, hcom, coe, V, Vin, Vproj;<br>
            3. Arend, redtt, RedPRL: \(i: I)->, i @ x, coe, V, Vin, Vproj;<br>
            4. hcomptrans: \(i: I)->, i @ 0, /\, \/, ~, hcomp, Glue, glue, unglue;<br>
            5. Agda: \(i: I)->, i @ x, hcomp, comp, \/, /\, ~, coe, Glue, glue, unglue.</p>

        <p> Хотя это официальные пейперы современных кубиков (по сути &mdash; руководства
            в авторских математических синтаксисах), хочу сказать, что
            идею моделирования омега-групоидов Т-комплеками высказывали
            Браун и Хиггинс в 1981 году &mdash;
            <a href="http://www.numdam.org/article/CTGDC_1981__22_4_349_0.pdf">BH</a><sup><a href="#5">5</a></sup>.
            Рональд Браун даже разработал свою систему обозначений с соединениями,
            которая описана в презентации
            <a href="http://hamilton.nuigalway.ie/HPT/brown.pdf">A homotopical approach to algebraic topology via compositions of cubes</a>,
            в этих слайдах также есть ссылка на работу Брауна, Хиггинса, Сиверы по некоммутативной алгебраической топологии.</p>

        <p> Вообще нарезать пространство можно не обязательно кубами,
            для этого подойдет любой плотный узор из однотипных геометрических объектов.
            Например, пространство можно заполнить рисинками-бананами,
            или причудливыми трехмерными розетками. </p>

        <h4>Отличительные особенности</h4>

        <p> Декартовая модель кубической теории основанна не на примитивах композишина
            и склеек comp Glue glue, а на коершинах и гомогенных композициях coe, hcom
            а вместо glue — V-типы (в yacct две иерархии вселенных: претипы и типы Кана).
            Хотя и то и другое — операции Кана, последняя модель позволяет получить более
            компактные доказательства и более компактный тайпчекер.<p>

        <h4>Примеры</h4>

        <p> Как вы уже должны были прочитать из пейперов, кубическая теория типов выражается в терминах
            предпучков как функтор: F : ☐<sup>op</sup> → Set,
            где ☐ &mdash; это Теория Лавира алгебр де Моргана, которые
            включеют в себя главным образом i /\ j, i \/ j, а также 1 - i,
            можно считать это дополнительными операциями на отрезке.
            Вообще алгебра Де Моргана это дистрибутивная решётка
            оснащённая контравариантной инволюцией, т.е. отображением 
            ¬ : D<sup>op</sup> → D таким, что ¬ ¬ A = A.</p>

        <p> Для примера покажем как соединения /\, \/ выражаются через декартовые
            примитивы coe (Харпер) и hcomp (Мортберг). Первый примитив, coe, позволяет
            ужать ядро до минимума, имея лишь coe не нужно конекшинов и
            даже hcomp (но тогда HIT рекурсивные работать не будут). Второй более гибкий,
            и на нём основана ветка hcomptrans, единственная в которой чекаются
            расслоения Хопфа (ну и в Агде еще как порте cubicaltt модели).

        <h3>cubicaltt/Agda</h3>

        <p> Синтаксис кубика настолько простой, что его BNF нотацию
            я могу привести на 16 строчек, следите за руками:</p>

   <figure><code>
   sys := [ sides ]              side := (id=0)->exp+(id=1)->exp
  form := form\/f1+f1+f2        sides := #empty+cos+side
   cos := side,side+side,cos      mod := module id where imps dec
    f1 := f1/\f2                   f2 := -f2+id+0+1
   imp := import id               brs := #empty+cobrs
   app := exp exp                 tel := #empty+cotel
  imps := #list imp             cotel := (exp:exp) tel
    id := #list #nat              dec := #empty+codec
    u2 := glue+unglue+Glue         u1 := fill+comp
   ids := #list id                 br := ids->exp+ids@ids->exp
 codec := def dec
 cobrs := | br brs
   sum := #empty+id tel+id tel|sum+id tel < ids > sys
   def := data id tel=sum+id tel:exp=exp+id tel:exp where def
   exp := cotel*exp+cotel->exp+exp$\rightarrow$exp+(exp)+id
          (exp,exp)+\cotele->exp+split cobrs+exp.1+exp.2+
          <ids>exp+exp@form+app+u2 exp exp sys+u1 exp sys
        </code></figure>

        <p> В нем кроме индуктивных типов, которые расширены равенствами нет больше ничего,
            даже сплиты обязательно в том же порядке указывать, нет рекордов, зато есть
            сигма встроенная в ядро, так что ета-эквалити работает автоматически для пар.
            Будем считать cubicaltt самым референсным и минималистичным из всех.</p>

        <p> С точки зрения cubicaltt мы всегда рассматриваем /\, \/ как аксиомамы,
            ведь доказывать с помощью них удобно, и первое что доказывается с помощью
            соединения &mdash; это стягиваемость синглтонов и через нее J.
            Мы же в этой статье попытаемся записать соединения через другие примитивы,
            так это аксиомы только в кубике:</p>

   <figure><code>
 connectionOr (A: U) (a b: A) (p: Path A a b)
   : PathP (&lt;x&gt; Path A (p @ x) b) p (&lt;_&gt; b)
   = &lt;y x&gt; p @ (x \/ y)
        </code></figure>

            <p>Тут показана просто синонимическая типизация примитивов \/ и /\.</p>

   <figure><code>
 connectionAnd (A: U) (a b: A) (p: Path A a b)
   : PathP (&lt;x&gt; Path A a (p @ x)) (&lt;_&gt; a) p
   = &lt;x y&gt; p @ (x /\ y)
        </code></figure>

        <p> Так как кубическая система типов Агды была портом из cubicaltt и Мортберг
            является офиицальным мейнтейнером либы agda/cubical, то в ней соединения
            тоже являются аксиомами.</p>

        <h3>Arend</h3>

        <p> Итак о синтаксисе Аренда. Аренд проделал на мой взгляд хирургическую
            адаптацию синтакиса кубика. Диапазон имен идентификаторов здесь расширен до агдового,
            добавились такие удобные штуки, как infix нотация, экстенсибл рекорды,
            которые есть только в Lean, тайп классы как расширения рекордов и их синонимы,
            вообщем все сделано очень приятно.
            Доволен потому, что когда я портировал категорную библиотеку на Аренд,
            мне пришлось применить парочку регекспов и файл чекнулся автоматом.
            Такая близость в генеалогии к классическому минималистическому
            кубику мне очень понравилась.</p>

        <p> Arend открывает мир в мечты о формальной верификации Java или Kotlin программ.
            Скажем если взять Arend программы, стирать из них гомотопические доказатесльтва
            и экстрактить в чистую лямбду или Kotlin,
            то можно построить неплохой замкнутый формальный стек на отдельно взятой платформе JVM.</p>

        <p> Да, можно говорить, что это все далеко от практики, но прототипы есть на других платфомах.
            Примеры существующих формальных стеков с I/O:
            <a href="https://github.com/forked-from-1kasper/leanbot">ircbot</a> IRC-бот для Lean,
            <a href="https://github.com/o29">github.com/o29</a> для Coq с экстрактом в OCaml,
            и возможно даже линковкой с MirageOS. Хотя кубики все же ближе к инструменту математика,
            чем к инструменту верификации ПО, но рано или поздно я уверен появятся
            гомотопические замкнутые стеки с экстрактом до Haskell, хотя бы,
            спот уже есть: <a href="https://o4.click">github.com/o4</a> для
            Agda с экстрактом в Haskell через компилятор MAlonzo. </p>

        <p> Тут покажем как
            выразить их через coe (используется синтаксис Arend).
            В раннем Arend пейпере meet называется squeeze.</p>

   <figure><code>
 \func meet (i j : I)
   => \let | p1 => \lam i j =>
                   (coe (\lam x => left = x) (path (\lam _ => left)) j @ i)
           | p2 => (path (\lam _ => path (\lam _ => left)))
       \in coe (\lam i => Path (\lam j => left = p1 i j) (path (\lam _ => left))
               (path (\lam j => p1 i j))) p2 right @ i @ j

 \func connAnd {A : \Type} {a b : A} (p : a = b) (i : I) : a = p @ i
   => path (\lam j => p @ meet i j)
        </code></figure>

        <h3>yacctt/RedPRL</h3>

        <p> Чекер yacctt Мортберг имплементировал чтобы показать
            действие системы типов RedPRL в своем синтаксисе cubicaltt,
            который я дал формально в виде BNF выше.</p>

   <figure><code>
 connAnd (A : U) (a b : A) (p : Path A a b) :
   PathP (&lt;i&gt; Path A a (p @ i)) (&lt;_&gt; a) p =
   &lt;i j&gt; hcom 0->1 A
   [ (i=0) -> &lt;k&gt; hcom 1->0 A [ (k=0) -> &lt;_&gt; a, (k=1) -> p ] (p @ k)
   , (i=1) -> &lt;k&gt; hcom 1->j A [ (k=0) -> &lt;_&gt; a, (k=1) -> p ] (p @ k)
   , (j=0) -> &lt;k&gt; hcom 1->0 A [ (k=0) -> &lt;_&gt; a, (k=1) -> p ] (p @ k)
   , (j=1) -> &lt;k&gt; hcom 1->i A [ (k=0) -> &lt;_&gt; a, (k=1) -> p ] (p @ k)
   ] a
        </code></figure>

        <p>Что мы можем сказать смотря на такой код? Во-первых мы можем сказать
           что в этой системе типов код поддается роботизации, а значит хорошо
           подходит для перебора и автомаического поиска пруфтермов.</p>

   <figure><code>
 theorem Connection/And(#l:lvl) : (-> [ty : (U #l hcom)] [a b : ty]
         [p : (path [_] ty a b)] (path [i] (path [_] ty a (@ p i)) (abs [_] a) p))
    by { lam ty a b p => abs i j => `(hcom 0~>1 ty a
         [i=0 [k] (hcom 1~>0 ty (@ p k) [k=0 [_] a] [k=1 [l] (@ p l)])]
         [i=1 [k] (hcom 1~>j ty (@ p k) [k=0 [_] a] [k=1 [l] (@ p l)])]
         [j=0 [k] (hcom 1~>0 ty (@ p k) [k=0 [_] a] [k=1 [l] (@ p l)])]
         [j=1 [k] (hcom 1~>i ty (@ p k) [k=0 [_] a] [k=1 [l] (@ p l)])]
         [i=j [k] (hcom 1~>i ty (@ p k) [k=0 [_] a] [k=1 [l] (@ p l)])]) }.
        </code></figure>

        <h3>redtt</h3>

        <p>Чекер redtt является реимплементаций ядра RedPRL
           с более современным и человеческим синтаксисом.
           А вот так выглядит имплементация конекшинов на прувере redtt, через comp.
           Тут в стиле AUTOMATH для более крутой лямбды используется [].
           Читайте <a href="../2016/2016-08-09%20Американская%20и%20Британская%20школы%20Лямбды.htm">статью про лямбда синтаксисы</a>.</p>

   <figure><code>
 def connection/and
     (A : type)
     (p : 𝕀 → A)
   : [i j] A [ | j=0 | i=0 → p 0 | j=1 → p i | i=1 → p j | i=j → p i ]
   = λ i j → let face (l k : 𝕀) : A = comp 0 l (p 0) [ | k=0 → refl | k=1 → p ]
  in comp 0 1 (p 0) [ | i=0 | j=0 → refl
                      | i=1 → face j | j=1 → face i | i=j → face i ]
        </code></figure>

        <h3>Lean</h3>

        <p> В этом месяце сразу две большие новости. Первая &mdash; вливание
            кубической базовой библиотек <a href="https://github.com/groupoid/lean">Ground Zero</a> в Groupoid Infinity,
            построенную путем прямого встраивания индуктивного отрезка и фактортипов
            в систему типов Lean (где фактортипы поддерживаются на вычислительном
            уровне, работает индукция). Вторая &mdash; стремительное начало Agda порта.</p>

   <figure><code>
 def interval_cube : ℕ → Type
     | 0 := I
     | (n + 1) := interval_cube n × I

 def construct_cube {α : Sort u} :
     Π {n : ℕ}, (interval_cube n → α) → binary α n
     | 0 f := binary.leaf (f i₀) (f i₁)
     | (n + 1) f := binary.node (construct_cube (λ n, f ⟨n, i₀⟩))
                                (construct_cube (λ n, f ⟨n, i₁⟩))

 inductive Cube {α : Sort u} (n : ℕ) : binary α n → Type u
     | lam (f : interval_cube n → α) : Cube (construct_cube f)

 def Path {α : Sort u} (a b : α) := Cube 0 (binary.leaf a b)
 def Path.lam {α : Sort u} (f : I → α) : Path (f i₀) (f i₁) := Cube.lam f
 abbreviation lineP (σ : 𝕀 → Sort u) := Π (i : 𝕀), σ i

 notation `&lt;` binder `&gt; ` r:(scoped P, Path.lam P) := r

 def conn_and {α : Sort u} {a b : α} (p : a ⇝ b) :
     LineP (λ i, a ⇝ p # i) := λ i, &lt;j&gt; p # i ∧ j
        </code></figure>

        <h3>Эпилог</h3>

        <p> Так как вы уже знаете чем отличаются все кубики,
            можете поставить звезду нашей библиотеке Групоид Инфинити,
            написанной на вашем любимом кубическом прувере.
            Мы собрали для вас агрегатор всех библиотек
            тут: <a href="https://cubical.systems">https://cubical.systems</a>.</p>

        <h4>Статус:</h4>

        <p> &mdash; <a href="https://github.com/groupoid/cubical">cubicaltt</a> &mdash; 5521 LOC &mdash; 492K<br>
            &mdash; <a href="https://github.com/groupoid/agda">Agda</a> &mdash; 1330 LOC &mdash; 208K<br>
            &mdash; <a href="https://github.com/groupoid/lean">Lean</a> &mdash; 1514 LOC &mdash; 112K<br>
            &mdash; <a href="https://github.com/groupoid/arend">Arend</a> &mdash; 232 LOC &mdash; 11K<br></p>

        <br><br>
        <center>&dot;</center>
        <br><br>

        <p><b>Литература</b>:
        <a name=1>[1]</a>. M.Bezem, T.Coquand, S.Huber.
        <a href="http://www.cse.chalmers.se/~coquand/mod1.pdf">A model of type theory in cubical sets</a>.
        <a name=2>[2]</a>. C.Cohen, T.Coquand, S.Huber, A.Mörtberg.
        <a href="https://arxiv.org/pdf/1611.02108.pdf">Cubical Type Theory: a constructive interpretation of the univalence axiom</a>.
        <a name=3>[3]</a>. C.Angiuli, G.Brunerie, T.Coquand, K.-B.Hou (Favonia), R.Harper, D.R.Licata.
        <a href="https://guillaumebrunerie.github.io/pdf/cart-cube.pdf">Cartesian Cubical Type Theory</a>.
        <a name=4>[4]</a>. C.Angiuli, K.-B.Hou (Favonia), R.Harper.
        <a href="https://www.cs.cmu.edu/~cangiuli/papers/ccctt.pdf">Cartesian Cubical Computational Type
        Theory: Constructive Reasoning with Paths and Equalities</a>.
        <a name=5>[5]</a>. R.Brown, P.J.Higgins.
        <a href="http://www.numdam.org/article/CTGDC_1981__22_4_349_0.pdf">
        The equivalence of ω-groupoids and cubical T-complexes</a>.
        </p>
       
        <h3>Комментарии</h3>

        <div id="utterances" class="utterances" > </div>
        <script src="https://utteranc.es/client.js" repo="5HT/tonpa.guru" issue-number="3" theme="github-light" crossorigin="anonymous" async> </script>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>

</body>
</html>
