<html>
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
    <meta name="author" content="Namdak Tonpa"/>
    <title>2019-07-01</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2019-07-01</a>
</nav>
<main>
    <section>
        <h3>Часть 2. Общая структура</h3>

        <p>— <a href="2019-06-30%20DEPOT.htm">Часть 1. Введение</a><br>
           — <a href="2019-07-01%20ERP%20MOD.htm">Часть 2. Общая структура</a><br>
           — <a href="2019-07-08%20ERP%20BOOT.htm">Часть 3. Первичные цепочки</a><br>
           — <a href="2019-07-08%20KVS%20ADM.htm">Часть 4. Администратор данных</a><br>
           — <a href="2019-07-09%20BPE%20ADM.htm">Часть 5. Администратор процессов</a><br>
           — <a href="2019-07-17%20ENT%20APP.htm">Часть 6. Структура приложения</a><br>
           — <a href="2019-07-19%20ENT%20PUB.htm">Часть 7. Публикация в GCP</a></p>

        <p>В этой статье я расскажу из чего состоит модуль предприятия.</p>

    </section>
    <section>

        <p>Если рассматривать первичную гранулярность предприятия, которое
           в первом приближении состоит из модулей, то уже на примере PLM
           мы можем обнаружить полную структуру типового модуля, каждый элемент
           из которой представлен в экземпляре PLM.</p>

        <h3>Конфигурация</h3>

        <p>Первый и главный компонент приложения, его файл конфигурации
           (для Erlang — <b>sys.config</b>, для Elixir — <b>consig.exs</b>)
           который нужен для множества приложений-зависимостей:
           <b>n2o</b>, <b>kvs</b>, <b>erp</b>, <b>form</b>.
           Это обязательный компонент любого эрланг приложения которое
           нуждается в этих зависиомостях.</p>

        <p>Более подробно про конфигурацию Erlang и Elixir приложений можно почитать тут:</p>

        <p>— <a href="https://erlang.org">Erlang</a><br>
           — <a href="https://elixir-lang.org">Elixir</a></p>

        <h3>Публикация</h3>

        <p>Для построение релиза, обычного запуска или публикации в hex.pm
           с помощью <b>mad</b>, <b>mix</b> или <b>rebar3</b>
           вам необходимо файл публикации (для Erlang — <b>rebar.config</b>,
           для Elixir — <b>mix.exs</b>). Файл публикации содержил план запуска приложений.</p>

        <p>Более подробно про публикацию Erlang и Elixir приложений можно почитать тут:</p>

        <p>— <a href="https://mad.n2o.dev">mad</a> (Erlang)<br>
           — <a href="https://www.rebar3.org">rebar3</a> (Erlang)<br>
           — <a href="https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html">mix</a> (Elixir)</p>

        <h3>Типовые спецификации</h3>

        <p>Типовая спецификация — это совокупность определений типов (type),
           записей (record) и спецификаций функций (spec). Это информация для диалайзера,
           который помогает определить несоответствие кода этим спецификациям. Все системы
           сборки поддерживают проверку dialyzer.</p>

        <p>В типовых спецификациях мы храним внутренние структуры
           фреймворков и приложений, а также бизнес-объектов предприятия.
           Язык описания бизнес объектов поддерживает кортежи (для сообщений)
           суммы (для протоколов), скалярные и векторные типы (для полей).</p>

        <p>Типовые спецификации хранятся в папке <b>include</b>, которая
           содержит HRL файлы, которые содержат типовые спецификации.
           Все -spec, -record, -type определения должны быть здесь. В Elixir
           импортируйте их с помощью <b>Record.extract</b>.</p>

        <p>Если приложение не содержит include папки (как например PLM модуль),
           то это означает, что модуль не определяет никаких дополнительных типов,
           а пользуется типами своих зависимостей либо не пользуется ими вообще.</p>

        <p>Более подробно про типовые спецификации и поддерживаемые языки программирования
           можно почитать тут:</p>

        <p>— <a href="https://bert.n2o.dev">bert</a></p>

        <h3>Протоколы</h3>

        <p>Если приложение реализует какой-то протокол, это протокол встраивается
           в протокольные циклы n2o_mqtt, n2o_ws, n2o_tcp распределеннонго кольца воркеров
           которые обслуживают запросы клиентских приложений.</p>

        <p>Список протоколов определяется в переменной protocols библиотеки N2O:</p>

        <figure><code>
  protocols:
  [
    :n2o_heart,
    :n2o_nitro,
    :n2o_ftp,
    :bpe_n2o,
    CHAT.TXT
  ]
        </code></figure>

        <p>А список воркеров которые реализуют эти протоколы на эндпойнтах:</p>

        <figure><code>
  mqtt_services: ['erp', 'plm'],
  ws_services: ['chat'],
        </code></figure>

        <p>Протоколы, если они реализованы приложенинем,
           находятся в папке <b>src/protos</b> или <b>lib/protos</b>
           для Erlang и Elixir соответственно.</p>

        <p>Более подробно про N2O протоколы и их использование
           можно почитать тут:</p>

        <p>— <a href="https://ws.n2o.dev">n2o</a></p>

        <h3>Цепочки</h3>

        <p>Все данные типизированные типовыми спецификациями хранятся в KVS хранилище.
           Это Erlang-ориентированная абстракция над
           записями/кортежами (records, tuples, C-structures) которая
           позволяется прятать за единым интерфейсом несколько KV хранилищ (включая
           Mnesia, RocksDB, Cassandra).</p>

        <h4>Кортежи и их цепочки</h4>

        <p>В основе KVS лежат понятия кортежа и цепочки. Типы кортежей определяются
           в типовых спецификациях, а цепочки — это последовательности кортежей
           в общем случае любых типов, т.о. можно говорить о гетерогенных и гомогенных цепочках.</p>

        <p>Каждая цепочка индексируется своим идентификатором, который представляет
           собой сегментированый путь в иерархической виртуальной файловой системе.
           Это сделано для того, чтобы префиксным поиском можно было выбрать всех
           детей определённой подветки в иерархии идентификаторов цепочек. Все идентификаторы
           всех цепочек также находятся в цепочке.</p>

        <h4>Схемы</h4>

        <p>Каждый модуль предрприятия может включать одну или множество схем.
           Схема — это совокупность типовых спецификаций, другими словами определённый набор
           кортежей и их типов, как форма дистрибуции
           типовой спецификации.</p>

        <h4>Первичные корневые цепочки</h4>

        <p>Чтобы не создавать руками все базовые словари и основные организационные структуры
           удобно вынести их в так называемые загрузочные модули. Эти записи автоматически
           создаются при холодном старте приложения <b>ERP</b>. Корневым первичным цепочкам
           посвящены сразу две следующие части:
           Часть 3. Создание первичных цепочек, где рассказывается как создавать организационную
           структуру предприятия в виде загрузочных модулей первичных корневых цепочек. и
           Часть 4. Создание админинстратора данных, где рассказывается как создать
           универсальный просмотрщик цепочек в виде отдельного модуля предприятия.</p>

        <p>Более подробно про систему хранениня KVS и управление типовыми спецификациями
           можно почитать тут:</p>

        <p>— <a href="https://kvs.n2o.dev">kvs</a></p>

        <h3>Процессы</h3>

        <p>Если все данные информационной системы предприятия хранятся в цепочках,
           то эволюция этих данных происходит с помощью бизнес-процессов.
           Бизнес-процессы призваны решить определённые проблемы связанные
           с масштабированием бизнес-логики на производстве, поэтому эта часть
           предприятия хорошо стандартизирована с 2008 года с появлением более-менее
           универсального стандарта BPMN который частично поддерживается системой
           управления процессами BPE.</p>

        <p>В общем случае бизнес процессы (БП) — это графовое представление алгоритма с именами переходов,
           состояний и ассоциированых функций. Все бизнес-модули предприятия реализуют
           какой-то главный БП, и серию вспомогательных процессов. БП призваны решить проблему
           изоляции распределённой транзакции в виде отдельного процесса виртуальной машины.
           Этот БП представляет собой обычную функцию <b>action/2</b>, аргументы которой
           являются идентификаторы цепочек. В качестве эффектов этот БП генерирует данные
           в других цепочках, реализуя таким образом вычислительную модель исчисления процессов.</p>

        <p>Например БП "Счет в Банке" является циклическим рекуррентным процессом
           который исходит из и входит в одно и тоже состояние (моноид). В качестве аргумента
           у этой функции состоящей из одного условия есть только скалярная
           величина — бизнес объект "Транзакция". Таким образом трейс этого
           процесса будет цепочка транзакций. Операция перевода денег в такой модели
           будет означать распределённую транзакцию между всеми участниками перевода,
           контроллируемую отдельным процессом.</p>

        <p>В рассматриваемой системе, модуль PLM включает три процесса:
           1) Процесс "Счет в Банке" финансового модуля FIN;
           2) Процесс "Продукт" модуля PLM;
           3) Процесс "Пре-Продукт" модуля PLM.
           В Части 5. Администратор процессов показано как создать администратор процессов
           для модуля BPE, который предназначен для ознакомления с системой, а также для
           примитивного ручного тестирования.</p>

        <p>Более подробно про систему управления бизнес-процессами BPE и ее использование
           можно почитать тут:</p>

        <p>— <a href="https://bpe.n2o.dev">bpe</a></p>

        <h3>Страницы</h3>
        <h3>Редакторы</h3>

        <figure><img src="ent/15.png"></figure>

        <h3>Векторы</h3>
        <h3>Роутер</h3>

        <p>Более подробно про веб-фреймворк NITRO
           можно почитать тут:</p>

        <p>— <a href="https://nitro.n2o.dev">nitro</a></p>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
