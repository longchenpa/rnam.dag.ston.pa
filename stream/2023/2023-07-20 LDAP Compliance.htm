<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2023-07-20 LDAP Compliance</title>
    <link rel="stylesheet" href="../../blank.css" />
    <link rel="stylesheet" href="../../journal.css?v=1" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2023-07-20</a>
</nav>
<main>
    <section>

    <h3>LDAP Compliance</h3>

    <p>Here is presented schemaless LDAP Server
       with SQLite backend in 300 LOC of Elixir.</p>

    <p>IETF follow up:   2849, 3296, 3671--3673, 3866, 4511--4518,
       4522, 4525, 4526, 4529, 1823, 2377, 2820, 3352, 3384, 3494,
       4510, 4520, 4521, 2589, 2649, 2696, 2891, 3062, 3829, 3876,
       3909, 3928, 4370, 4373, 4527, 4527, 4531--4533, 5805, 6171,
       2247, 2798, 2926, 2985, 3045, 3112, 3687, 3698, 4517, 4519,
       4524, 4530, 5020, 2079, 2307, 2713, 2714, 2739, 3641, 3642,
       3703, 3727, 4104, 4403, 4523, 4792, 4876, 5803, 7612, 8284.</p>

    <p>Compatibility: Apache Directory Studio, OpenLDAP.</p>

    <h4>Мотивація</h4>

    <p>Пройшло 13 років з того часу як компанія SYNRC випустила була свій власний
       брендований LDAP Directory Server на Erlang з підтримкою MongoDB. Взагалі
       баз які підтримують префіксний і суфіксний пошук по B-Tree таблицям не так багато,
       в основному це складні SQL та MongoDB. Хоча такі бази як Mnesia,
       LMDB, BDB-похідні (RocksDB, LevelDB) немають повнотекстового пошуку,
       це можна реалізувати шляхом повного траверса, що на цих базах зазвичай працює
       швидко (якшо на С), і ше швидше якшо база підтримує mmap (LMDB).<p>

    <p>Непереможний по перформенсу станом на зараз є OpenLDAP (LMDB),
       однак нам хочеться мати свою імплементацію, яку можна було би використовувати
       як фірмове сховище даних для директорії ресурсів підприємства згідно як
       міжнародних стандартів так і стандартів України. Ми захотіли відмовитися
       від зовнішньої бази даних (MongoDB) що ускладнює розробку, і хотілося вибрати
       шось вбудовуване для Erlang, вибирали
       між <a href="https://github.com/zambal/elmdb">zambal/elmdb</a> та 
       <a href="https://github.com/elixir-sqlite/exqlite">elixir-sqlite/exqlite</a>,
       переміг SQLite тому шо хотілося мати мінімальну ідіоматичну імплементацію,
       така шоб з одного боку була зрозуміла навіть людям без глибокої освіти
       в Computer Science, а з іншого боку відкривала двері в підтримку інших
       промислових корпоративних SQL джерел даних (Oracle, T-SQL, PostgreSQL).

    <figure><img src="https://ldap.erp.uno/priv/design/ldap-shaders.png"></figure>

    <p>На відміну від попередньої версії SYNRC LDAP яка робилася під
       стартап PEOPLE|SYNC який ми хотіли продати PEOPLE|NET, а потім Київстар,
       як SyncML стартап по синхронізації контактних книг, ця версія
       робиться для стартапа SYNRC CHAT який ми хочемо продати ГУР МО.
       В цій версії ми значну увагу приділили сумісністю з клієнтами,
       такими як Apache Directory Studio, а також усіма LDIF файлами
       які ми змогли знайти в інтернеті.</p>

    <figure><img src="img/apache-ds.jpg"></figure>

    <p>Так як якісну безпечну розподілену інфраструктуру яка відповідає
       міжнародним і українським стандартами неможливо створити без CA/CMS,
       OCSP, TSP, LDAP, DNS/DNSSEC, MQTT серверів, то всі ці сервери є
       фундаментом продуктів SYNRC які формують перший рівень <a href="https://erp.uno">фреймворку
       Сохацького</a> який умовно називається Security або Безпека Підприємства.
       На цьому фреймворку побудовані <a href="https://infotech.gov.ua/projects/mia-registers">головні
       інфраструктурні елементи країни</a>, а також <a href="https://cartulary.erp.uno/">реєстрові
       системи</a>.</p>

    <figure><img src="img/erpuno.PNG"></figure>

    <p>Загалом, LDAP це дуже древня і надійна технологія яка присутня буквально у всіх топових компаніях,
       корпораціях, великих і малих бізнесах. Так, є сучасній Identity Server продукти (Hashicorp)
       які не підтримуються LDAP, але це поодинокі непопулярні маргінальні екземпляри. SYNRC LDAP
       це гарний початок для малих, середніх і великих бізнесів навести порядок в штатних розкладах,
       календарях, задачах, ресурсах підприємства, таких як автопарки, IoT, реєстрах персональних і промислових
       комп'ютерів, портів, правил ABAC, правил маршрутизації, контактних книгах користувачів, одним словом
       все для чого створений і де використовується LDAP.</p>

    <h4>Вертикальні бази</h4>

    <p>Я вперше познайомився з вертикальними базами коли працював в International Land Systems, Inc.
       Тоді в нас була система документообігу на вертикальній базі, які дуже часто використовуються
       в системах документообігу. Наприклад таку схему даних використовує Alfresco, а також
       SQL розширення для зберігання XML у Oracle та інших SQL базах.</p>

    <p>Основна ідея вертикальних баз, або схем, полягає в тому шо об'єкти зберігаються
       не у плоских таблицях де кожен атрибут це окрема колонка, а всі атрибути та їх значення
       зберігаються в трьох колонках, де перша &mdash; це номер об'єкта, друга &mdash; ім'я атрибута,
       а третя &mdash; значення атрибуту. Це дозволяє тримати розріжені (атрибутами) об'єкти,
       та певним чином спростити управління базою. Всі наївні імплементації вертикальних баз
       страждаються по перформенсу, тому потрібно бути обрежним. Наприклад, ми не рекомендуємо
       використовувати SYNRC LDAP де об'єм директоріє більше ніж пів мільйона співробітників,
       наприклад для Walmart. Для великих корпорацій краще брати OpenLDAP.</p>

    <h3>Предметна область</h3>

    <h4>Netscape, Sun DS, 389 DS, Oracle</h4>

    <p>PEOPLE|SYNC стартап SYNRC 2007 року підтримував також роботу з Sun Directory Server. Його родословна
       бере початок від сервера OpenLDAP, в 1996 року стартував форк Netscape Directory Server.
       Після банкротства Netscape право на код викупила компанія AOL, яка ліцензувала право на розробку
       компанії Sun Microsystems, зберігши право на код. В 2009 році Sun DS був переіменований на 389 Directory Server,
       а Oracle почала свій форк Sun DS під назвою
       <a href="https://www.oracle.com/docs/tech/middleware/ds-oracle-dsee-final.pdf">Oracle Directory Server</a></p>

    <h4>Microsoft Active Directory</h4>

    <p>Традиційно кожна корпорація займається розробкою свого LDAP сервера,
       компанія Microsoft випустила свій перший в 1999 році. Active Directory
       у якості бекенда використовує Extensible Storage Engine ESENT.DLL,
       також відомий як JetDB, на яцій побудований також Windows Registry,
       Microsoft Access, та можливо і інші внутрішні продукти компанії Microsoft.</p>

    <h4>OpenLDAP, Apple Open Directory</h4>

    <p>Були часи, що OpenLDAP був вбудований в кожну версію Mac OS X,
       але Apple почала розвивати свій власний
       <a href="https://images.apple.com/server/docs/Open_Directory_TB_v10.4.pdf">Open Directory Server</a>,
       оскільки безпека кожної корпорації полягає у тому числі в брендованих
       LDAP серверах під свої потреби та політику розробки..</p>

    <h3>TCP сервер</h3>

<figure><code>defmodule LDAP.TCP do
   import Exqlite.Sqlite3
   require LDAP

   def code(), do: :binary.encode_hex(:crypto.strong_rand_bytes(8))

   def initDB(path) do
       {:ok, conn} = open(path)
       :logger.info 'SYNRC LDAP Instance: ~p Connection: ~p', [path,conn]
       execute(conn, "create table ldap (rdn text,att text,val binary)")
       :ok = execute(conn, "PRAGMA journal_mode = OFF;")
       :ok = execute(conn, "PRAGMA temp_store = MEMORY;")
       :ok = execute(conn, "PRAGMA cache_size = 1000000;")
       :ok = execute(conn, "PRAGMA synchronous = 0;")
       conn
   end

   def listen(port,path) do
       conn = initDB(path)
       {:ok, socket} = :gen_tcp.listen(port,
         [:binary, {:packet, 0}, {:active, false}, {:reuseaddr, true}])
       accept(socket,conn)
   end

   def accept(socket,conn) do
       {:ok, fd} = :gen_tcp.accept(socket)
       :erlang.spawn(fn -> loop(fd, conn) end)
       accept(socket,conn)
   end

   def start() do
       :erlang.spawn(fn ->
           listen(:application.get_env(:ldap,:port,1489),
                  :application.get_env(:ldap,:instance,code())) end)
   end

   def loop(socket, db) do
       case :gen_tcp.recv(socket, 0) do
            {:ok, data} ->
                 case :'LDAP'.decode(:'LDAPMessage',data) do
                      {:ok,decoded} ->
                          {:'LDAPMessage', no, payload, _} = decoded
                          message(no, socket, payload, db)
                          loop(socket, db)
                      {:error,reason} ->
                         :logger.error 'ERROR: ~p', [reason]
                        :exit
                 end
            {:error, :closed} -> :exit
       end
   end

end</code></figure>

    <h3>DSE</h3>

<figure><code>   def attr(k,v),      do: {:PartialAttribute, k, v}
   def node(dn,attrs), do: {:SearchResultEntry, dn, attrs}

   def message(no, socket,
       {:searchRequest, {_,"",scope,_,limit,_,_,filter,attributes}}, db) do

       :logger.info 'DSE Scope: ~p', [scope]
       :logger.info 'DSE Filter: ~p', [filter]
       :logger.info 'DSE Attr: ~p', [attributes]

       :lists.map(fn response -> answer(response,no,:searchResEntry,socket) end,
         [ node("", [
              attr("supportedLDAPVersion", ['3']),
              attr("namingContexts", ['dc=synrc,dc=com','ou=schema']),
              attr("supportedControl", ['1.3.6.1.4.1.4203.1.10.1']),
              attr("supportedFeatures", ['1.3.6.1.1.14', '1.3.6.1.4.1.4203.1.5.1']),
              attr("supportedExtensions", ['1.3.6.1.4.1.4203.1.11.3']),
              attr("altServer", ['ldap.synrc.com']),
              attr("subschemaSubentry", ['ou=schema']),
              attr("vendorName", ['SYNRC LDAP']),
              attr("vendorVersion", ['1.0']),
              attr("supportedSASLMechanisms", ['SIMPLE']),
              attr("objectClass", ['top','extensibleObject']),
              attr("entryUUID", [code()])])])

       resp = LDAP.'LDAPResult'(resultCode: :success, matchedDN: "", diagnosticMessage: 'OK')
       answer(resp, no, :searchResDone,socket)
   end</code></figure>

    <h3>BIND</h3>

<figure><code>   def message(no, socket, {:bindRequest, {_,_,bindDN,{:simple, password}}}, db) do
       {:ok, statement} = prepare(db,
           "select rdn, att from ldap where rdn = ?1 and att = 'rootpw' and val = ?2")
       bind(db, statement, [hash(qdn(bindDN)),password])
       case step(db, statement) do
           :done ->  code = :invalidCredentials
                     :logger.error 'BIND Error: ~p', [code]
                     response = LDAP."BindResponse"(resultCode: code,
                         matchedDN: "", diagnosticMessage: 'ERROR')
                     answer(response, no, :bindResponse, socket)
            {:row,[dn,password]} ->
                     :logger.info 'BIND DN: ~p', [bindDN]
                     response = LDAP."BindResponse"(resultCode: :success,
                          matchedDN: "", diagnosticMessage: 'OK')
                     answer(response, no, :bindResponse, socket)
       end
   end

   def message(no, socket, {:bindRequest, {_,_,bindDN,creds}}, db) do
       code = :authMethodNotSupported
       :logger.info 'BIND ERROR: ~p', [code]
       response = LDAP."BindResponse"(resultCode: code,
          matchedDN: "", diagnosticMessage: 'ERROR')
       answer(response, no, :bindResponse, socket)
   end</code></figure>

    <h3>ADD</h3>

<figure><code>   def createDN(db, dn, attributes) do
       norm  = :lists.foldr(fn {:PartialAttribute, att, vals}, acc ->
               :lists.map(fn val -> [qdn(dn),att,val] end, vals) ++ acc end, [], attributes)
       {_,p} = :lists.foldr(fn x, {acc,res}  -> {acc + length(x), appendNotEmpty(res) ++
               :io_lib.format('(?~p,?~p,?~p)',[acc+1,acc+2,acc+3])} end, {0,[]}, norm)
       {:ok, statement} = prepare(db, 'insert into ldap (rdn,att,val) values ' ++ p ++ '')
       :ok = bind(db, statement, :lists.flatten(norm))
       :done = step(db, statement)
   end

   def message(no, socket, {:addRequest, {_,dn, attributes}}, db) do
      {:ok, statement} = prepare(db, "select rdn, att, val from ldap where rdn = ?1")
      bind(db, statement, [hash(qdn(dn))])
      case step(db, statement) do
            {:row, _} ->
                :logger.info 'ADD ERROR: ~p', [dn]
                resp = LDAP.'LDAPResult'(resultCode: :entryAlreadyExists,
                       matchedDN: dn, diagnosticMessage: 'ERROR')
                answer(resp, no, :addResponse, socket)
            :done ->
                createDN(db, dn, attributes)
                :logger.info 'ADD DN: ~p', [dn]
                resp = LDAP.'LDAPResult'(resultCode: :success,
                       matchedDN: dn, diagnosticMessage: 'OK')
                answer(resp, no, :addResponse, socket)
       end
   end</code></figure>

    <h3>MODIFY</h3>

<figure><code>   def modifyDN(db, dn, attributes), do:
       :lists.map(fn {_, :add, x}     -> modifyAdd(db,dn,x)
                     {_, :replace, x} -> modifyReplace(db,dn,x)
                     {_, :delete, x}  -> modifyDelete(db,dn,x) end, attributes)

   def modifyAdd(db, dn, {_,att,[val]}) do
       {:ok, st} = prepare(db, "insert into ldap (rdn,att,val) values (?1,?2,?3)")
       :logger.info 'MOD ADD RDN: ~p', [hash(qdn(dn))]
       bind(db, st, [hash(qdn(dn)),att,val])
       step(db,st)
   end

   def modifyReplace(db, dn, {_,att,[val]}) do
       {:ok, st} = prepare(db, "update ldap set val = ?1 where rdn = ?2 and att = ?3")
       :logger.info 'MOD REPLACE RDN: ~p', [hash(qdn(dn))]
       bind(db, st, [val,hash(qdn(dn)),att])
       step(db,st)
   end

   def modifyDelete(db, dn, {_,att,_}) do
       {:ok, st} = prepare(db, "delete from ldap where rdn = ?1 and att = ?2")
       :logger.info 'MOD DEL RDN: ~p', [hash(qdn(dn))]
       bind(db, st, [hash(qdn(dn)),att])
       res = step(db,st)
       collect0(db,st,res,[])
   end

   def message(no, socket, {:modifyRequest, {_,dn, attributes}}, db) do
      {:ok, statement} = prepare(db, "select rdn, att, val from ldap where rdn = ?1")
      bind(db, statement, [hash(qdn(dn))])
      case step(db, statement) do
           {:row, _} -> :logger.info 'MOD DN: ~p', [dn]
                        modifyDN(db, dn, attributes)
                        resp = LDAP.'LDAPResult'(resultCode: :success,
                            matchedDN: dn, diagnosticMessage: 'OK')
                        answer(resp, no, :modifyResponse, socket)
           :done ->     :logger.info 'MOD ERROR: ~p', [dn]
                        resp = LDAP.'LDAPResult'(resultCode: :noSuchObject,
                           matchedDN: dn, diagnosticMessage: 'ERROR')
                        answer(resp, no, :modifyResponse, socket)
      end
   end</code></figure>

    <h3>MODIFY DN</h3>

<figure><code>   def message(no, socket, {:modDNRequest, {_,dn,rdn,old,_}}, db) do
       :logger.info 'MOD RDN DN: ~p', [dn]
       :logger.info 'MOD RDN newRDN: ~p', [rdn]
       :logger.info 'MOD RDN oldRDN: ~p', [old]
       resp = LDAP.'LDAPResult'(resultCode: :success, matchedDN: dn, diagnosticMessage: 'OK')
       answer(resp, no, :modDNResponse, socket)
   end</code></figure>

    <h3>DELETE</h3>

<figure><code>   def deleteDN(db, dn) do
       {:ok, st} = prepare(db, "delete from ldap where rdn = ?1")
       bind(db, st, [hash(qdn(dn))])
       res = step(db,st)
       collect0(db,st,res,[])
   end

   def message(no, socket, {:delRequest, dn}, db) do
       :logger.info 'DEL DN: ~p', [dn]
       deleteDN(db, dn)
       resp = LDAP.'LDAPResult'(resultCode: :success, matchedDN: dn, diagnosticMessage: 'OK')
       answer(resp, no, :delResponse, socket)
   end</code></figure>

    <h3>SEARCH</h3>

<figure><code>   def collect(socket,no,db,st,:done, dn, att, values, attributes, nodes) do
       answer(node(qdn0(dn),[attr(att,values)|attributes]),no,:searchResEntry,socket)
       [node(dn,[attr(att,values)|attributes])|nodes]
   end

   def collect(socket,no,db,st,{:row,[xrdn,xatt,yval]},
       dn, att, values, attributes, nodes) do

       xval = bin(yval)
       next = step(db,st)
       case xrdn == dn do
          false ->
             answer(node(qdn0(dn),[attr(att,values)|attributes]),
                no,:searchResEntry,socket)
             collect(socket,no,db,st,next,xrdn,xatt,
                [xval],[],[node(dn,[attr(att,values)|attributes])|nodes])
          true ->
             case xatt == att do
                true  -> collect(socket,no,db,st,next,dn,xatt,
                            [xval|values],attributes,nodes)
                false -> collect(socket,no,db,st,next,dn,xatt,
                            [xval],[attr(att,values)|attributes],nodes)
             end
       end
   end

   def query(:baseObject,q,dn), do:
       "select * from ldap where rdn = '#{dn}'"

   def query(:singleLevel,q,dn), do:
       "select * from ldap where rdn in " <>
       "(select rdn from ldap where (rdn like '#{dn}/%') and " <>
       match(q) <> ")"

   def query(:wholeSubtree,q,dn), do:
       "select * from ldap where rdn in " <>
       "(select rdn from ldap where (rdn like '#{dn}%') and " <>
       match(q) <> ")"

   def join(list, op), do:
       :string.join(:lists.map(fn x ->
          :erlang.binary_to_list("(" <> match(x) <> ")")
       end, list), op) |> :erlang.iolist_to_binary

   def match({:equalityMatch, {_, a, v}}),         do: "(att = '#{a}' and val    = '#{v}')"
   def match({:substrings, {_, a, [final: v]}}),   do: "(att = '#{a}' and val like '#{v}%')"
   def match({:substrings, {_, a, [initial: v]}}), do: "(att = '#{a}' and val like '%#{v}')"
   def match({:substrings, {_, a, [any: v]}}),     do: "(att = '#{a}' and val like '%#{v}%')"
   def match({:present, a}),                       do: "(att = '#{a}')"
   def match({:and, list}),                        do: "(" <> join(list, 'and') <> ")"
   def match({:or,  list}),                        do: "(" <> join(list, 'or')  <> ")"
   def match({:not, x}),                           do: "(not(" <> match(x) <> "))"

   def select(socket, no, db, filter, scope, dn) do
       {:ok, st} = prepare(db, query(scope, filter, dn))
       case step(db,st) do
            :done -> []
            {:row, [dn,att,val]} ->
               collect(socket,no,db,st,{:row,[dn,att,val]},dn,att,[],[],[])
       end
   end

   def message(no, socket, {:searchRequest,
       {_,bindDN,scope,_,limit,_,_,filter,attributes}}, db) do

       :logger.info 'SEARCH DN: ~p', [qdn(bindDN)]
       :logger.info 'SEARCH Scope: ~p', [scope]
       :logger.info 'SEARCH Filter: ~p', [query(scope, filter, qdn(bindDN))]
       :logger.info 'SEARCH Attr: ~p', [attributes]

       select(socket, no, db, filter, scope, qdn(bindDN))
       resp = LDAP.'LDAPResult'(resultCode: :success, matchedDN: "", diagnosticMessage: 'OK')
       answer(resp, no, :searchResDone, socket)
   end</code></figure>

    <h3>COMPARE</h3>

<figure><code>   def message(no, socket, {:compareRequest, {_,dn, assertion}}, db) do
       :logger.info 'CMP DN: ~p', [dn]
       :logger.info 'CMP Assertion: ~p', [assertion]
       result = compareDN(db, db, assertion)
       resp = LDAP.'LDAPResult'(resultCode: :success, matchedDN: dn, diagnosticMessage: 'OK')
       answer(resp, no, :compareResponse, socket)
   end</code></figure>

    <h3>ABANDON/UNBIND</h3>

<figure><code>   def message(no, socket, {:abandonRequest, _}, db), do: :gen_tcp.close(socket)
   def message(no, socket, {:unbindRequest,  _}, db), do: :gen_tcp.close(socket)</code></figure>

   <br><center>&dot;</center>

    <hr>

   <br><center>&dot;</center>

     <p>
     [1]. <a href="https://www.skills-1st.co.uk/papers/ldap-schema-design-feb-2005/ldap-schema-design-feb-2005.html">Andrew Findlay. LDAP Schema</a><br>
     [2]. <a href="https://ldap.com">Neil Wilson. LDAP</a><br>
     </p>

    </section>
</main>
<footer><a href="https://instagram.com/5HT/">Namdak Tönpa</a> <span class="heart">&nbsp;❤&nbsp;</span> 2023</footer>
</body>
</html>

