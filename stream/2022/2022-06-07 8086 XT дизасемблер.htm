<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2022-06-07 XT: 8086 дизасемблер</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="https://tonpa.guru/journal.css" />
</head>
<body>
<nav>
    <a href='https://tonpa.guru/'>5HT</a>
    <a href='https://5ht.co/'>TOP</a>
    <a href='https://5ht.github.io/be/'>2022-06-07</a>
</nav>
<main>
    <section>

    <h3>XT: 8086 дизасемблер</h3>

    <h4>Передмова</h4>

    <p>У попередній статті про <a href="https://asmedit.github.io/be/">InfoSec редактор BE</a>
       ми розглянули просте завдання написати термінальний дизасемблер
       використовуючи існуючі бібліотеки дизасемблювання.
       У цій статті ми покажемо як написати таку бібліотеку самим.</p>

    <p>Ця вправа може стати лабораторною роботою, або курсовою роботою
       по курсу "КВ-123-17: Мікропроцесорні архітектури" для студентів першого курсу,
       які тільки знайомляться з існуючими архітектурами. Зазвичай у педагогічному процесі
       вибираються прості мікропроцесорні архітектури (такі як MIPS) або
       спеціалізовані для викладання (такі як RISC-V). Так чи інакше,
       працюючи у цій області, вам доведеться зіткнутися зі всіма архітектурами.</p>

    <p>У якості асемблера, або мови програмування на якій пропонується
       виконувати завдання ми вибрали NASM, який вже використали для
       побудови термінального дизасемблера. Заодно буде з чим порівнювати,
       так як ndisasm з поставки nasm займає у бінарному вигляді 1.5 мегабайта.
       Ми ж даємо обмеження у цьому завданні на дизасемблер &mdash; 64 кілобайта.</p>

    <p>Щоб вернути x86 архітектуру в академічне русло, ми обмежемо набір інструкцій
       системою команд мікропроцесора 8086, яка розширяє систему команд
       8-бітних процесорів 8085 за допомогою додаткового байта MOD_R/M і збільшує
       таким чином розмір команди до 6 байт (довжина конвеєру). </p>

    <h4>Вступ</h4>

      <p>У курсі "КВ-123-16 Основи схемотехніки" для студентів першого курсу
         ви знайомитеся з чого складається елементна база 2-бітних мікропроцесорів Intel 3000,
         та як збирати такі системи самому. У якості підручника ми використовуємо
         "Цифрові ЕОМ: Практикум". Самофалов, Корнійчук, Тарасенко, Жабін. Київ, "Вища школа", 1990.
         Однак після 2-бітних, де ви самі програмували матрицю мікрокоду для команд,
         4-бітних та 8-бітних процесорів, тільки 16-бітні процесори відкривають нову епоху
         сучасних процесорів Intel. Починаючи з цієї архітектури далі усі подальші процесори
         компанії Intel були сумісними між собою, тож вивчивши архітектуру 8086 ви зрозумієте
         контекст розвитку EM64T.</p>

       <figure><table cellspacing=10 bgcolor=white>
       <thead>
       <th>Рік</th><th>Код</th><th>Бітність</th><th>Опис</th><th>Чіпсет</th>
       </thead>
       <tbody>
       <tr><td>1970</td><td>3000</a></td><td>2</td><td>Intel 3000</td><td>DIY</td></tr>
       <tr><td>1971</td><td>4000</a></td><td>4</td><td>Intel 4000</td><td>MCS-4</td></tr>
       <tr><td>1974</td><td>ZX</a></td><td>8</td><td>Intel 8085/8080</td><td>MCS-85</td></tr>
       <tr><td>1976</td><td>XT</a></td><td>16</td><td>Intel 8086/8088</td><td>MCS-86</td></tr>
       <tr><td>1982</td><td>AT</a></td><td>16</td><td>Intel 80286</td><td>PS/2 Model 30</td></tr>
       <tr><td>1985</td><td>IA-32</a></td><td>32</td><td>Intel 80386</td><td>PS/2 Model 50</td></tr>
       <tr><td>1989</td><td>IA-32</a></td><td>32</td><td>Intel 80486</td><td>PS/2 Model 70</td></tr>
       <tr><td>1993</td><td>IA-32</a></td><td>32</td><td>Intel Pentium (P5/P54C)</td><td>Triton</td></tr>
       <tr><td>1995</td><td>IA-32</a></td><td>32</td><td>Intel Pentium Pro/II/III</td><td>82443BX</td></tr>
       <tr><td>2000</td><td>EM64T</a></td><td>64</td><td>Intel Pentium 4</td><td>82865P</td></tr>
       <tr><td>2006</td><td>EM64T</a></td><td>64</td><td>Intel Core</td><td>Q35</td></tr>
       <tr><td>2008</td><td>EM64T</a></td><td>64</td><td>Intel Atom</td><td></td></tr>
       <tr><td>2011</td><td>AVX</a></td><td>128</td><td>Intel Core (Sandy Bridge)</td><td>Z77, X99</td></tr>
       <tr><td>2013</td><td>AVX-2</a></td><td>256</td><td>Intel Core (Haswell)</td><td>Z97</td></tr>
       <tr><td>2017</td><td>AVX-512</a></td><td>512</td><td>Intel Phi, Core (Skylake)</td><td>Z370, X299</td></tr>
       <tr><td>2023</td><td>AMX</a></td><td>1024</td><td>Intel Core (Sapphire Rapids)</td><td>W790</td></tr>
       </tbody></table></figure>

       <p><b>Мотивація</b></p>

       <p>Особливо важливий це курс для тих, хто на третьому році навчання
          буде слухати курси на кафедрі мовного забезпечення КА-121, такі як
          "КА-121-04 Верифікація програмного забезпечення", "КА-121-03 Верифікація
          мікропроцесорних архітектур", та "КА-121-05 Верифікація об`єктного коду".</p>

       <p>Корисним цей курс буде для всіх, хто хоче навчитися вивчити асемблер у повному обсязі,
          так як ми пишемо асемблер та/або дизасеблер. У залежності від технічної
          орієнтації студентів, можна взяти альтернативний курс розробки
          LISP інтерпретатора на асемблері, але це вимагає знання програми другого року навчання.</p>

    <h4>Анотація</h4>

    <p>TL;DR &mdash; Дизасемблер на асемблері для Mac за 1 день на 672 байта для 45
        опкодів, де використовується байт MOD_R/M (00, 01, 02, 03,
                08, 09, 0A, 0B,
                10, 11, 12, 13,
                18, 19, 1A, 1B,
                20, 21, 22, 23,
                29, 29, 2A, 2B,
                30, 31, 32, 33,
                3C, 3D, 3E, 3F,
                88, 89, 8A, 8B,
                8D,
                80, 81,
                84, 85, 86, 87,
                C4, C5), тобто одразу для половини найскладніших мнемонік. Інші мнемоніки простіші та нагадуються 8085 асемблер.
                </p>

    <h4>Специфікація на архітектуру опкодів</h4>

    <p>Система команд 8086 розділяється на наступні категорії (загалом 89 мнемонік + 4 сегментних префікси):
       1) <b>інструкції пересилки даних</b> (14): MOV, PUSH, POP, XCHG, IN, OUT, XLAT, LEA, LDS, LES, LAHF, SAHF, PUSHF, POPF;
       2) <b>арифметичні інструкції</b> (20): ADD, ADC, INC, AAA, BAA, SUB, SSB, DEC, NEG, CMP, AAS, DAS, MUL, IMUL, AAM, DIV, IDIV, AAD, CBW, CWD;
       3) <b>логічні інструкції</b> (11): NOT, SHL, SHR, ROL, ROR, RCL, RCR, AND, TEST, OR, XOR;
       4) <b>маніпуляція з послідовностями</b> (6): REP, MOVS, CMPS, SCAS, LODS, STOS;
       5) <b>управління потоком виконання</b> (27): CALL, JMP, RET, INT, INT 3, INTO, IRET, JE, LJ, JLE, JB, JBE, JP, JO, JS, JNE, JNL, JNLE, JNB, JUNBE, JNP, JNO, JNS, LOOP, LOOPZ, LOOPNZ, JCXZ;
       6) <b>управління станом процесору</b> (11): CLC, CMC, STC, CLD, STD, CLI, STI, HLT, WAIT, ESC, LOCK. </p>

     <p>Тут ми використовуємо виключно синтаксичну специфікацію, тобто визначення
        на формат бінарної серіалізації певної програми певної архітектури. На курсі
        формальної верифікації будуть використовуватися семантичні формальні моделі
        для кожної інструкції які будуть у сутності формальними програмами на MLTT
        які відповідають псевдокоду для кожної інструкції з документації
        <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html">Intel SDM</a>.
        В цих специфікацях детально буде показано які біти яких регістрів змінюються та
        що відбувається з шиною пам'яті та даних. Зараз же ми соредимося виключно
        на серіалазації та компактифікації дизасемблера, тобто на синтаксичній специфікації.
        </p>

     <p><b>Легенда</b></p>

<figure><code>v      0: count=1; 1: count=CL;
d      0: from reg; 1: to reg;
w      0: byte; 1: word;
sg    00: ES; 01: CS; 10: SS; 11: DS;
mod   00: disp=0, disp-lo=N/A, disp-hi=N/A;
      01: disp=disp-lo sign-extended to 16-bit, disp-hi=N/A;
      10: disp=[disp-hi,disp-lo];
      11: r/m treaded as reg field;
reg  000: AX AL; 001: CX CL; 010: DX DL; 011: BX BL;
     100: SP AH; 101: BP CH; 110: SI DH; 111: DI BH;
r/m  000: (BX) + (SI) + disp; 001: (BX) + (DI) + disp;
     010: (BP) + (SI) + disp; 011: (BP) + (DI) + disp;
     100: (SI) + disp; 101: (DI) + disp;
     110: (BP) + disp or direct address when mod=00; 111: (BX) + disp;
</code></figure>

     <p><b>Загальний формат інструкції</b></p>

<figure><code>
LOCK    | префікс блокування шини
REP     | префікс циклічних операцій
SEG     | префікс перевизначення сегменту
OPCODE  | головний байт по якому здійснюється діспатч
MOD R/M | байт mod r/m для кодування адресації та порядку операндів
DISP    | відносна адреса на шині
IMM     | безпосередній операнд
</code></figure>

     <p><b>Таблиця мнемонік</b></p>

     <p>Таблиця мнемонік буде вміщувати 136 рядків, однак ми звузимо
        завдання до лобораторної роботи для для першого рядка,
        це одразу 4 варіанта інструкції ADD.</p>

<figure><code>1:
ADD    | 1000 00sw | mod 000 r/m | data | data if sw=01
ADC    | 1000 00sw | mod 010 r/m | data | data if sw=01
SBB    | 1000 00sw | mod 011 r/m | data | data if sw=01
SUB    | 1000 00sw | mod 101 r/m | data | data if sw=01
CMP    | 1000 00sw | mod 111 r/m | data | data if sw=01

2:
OR     | 1000 000w | mod reg r/m | data | data if w=1
TEST   | 1111 011w | mod 000 r/m | data | data if w=1
MOV    | 1100 011w | mod 000 r/m | data | data if w=1
AND    | 1000 000w | mod 100 r/m | data | data if w=1
XOR    | 1000 000w | mod 110 r/m | data | data if w=1

3:
LDS    | 1100 0101 | mod reg r/m
LES    | 1100 0100 | mod reg r/m
ADD    | 0000 00dw | mod reg r/m
OR     | 0000 10dw | mod reg r/m
ADC    | 0001 00dw | mod reg r/m
SBB    | 0001 10dw | mod reg r/m
SUB    | 0010 10dw | mod reg r/m
AND    | 0010 00dw | mod reg r/m
CMP    | 0011 10dw | mod reg r/m
XOR    | 0011 00dw | mod reg r/m
MOV    | 1000 10dw | mod reg r/m
LEA    | 1000 1101 | mod reg r/m
TEST   | 1000 010w | mod reg r/m
XCHG   | 1000 011w | mod reg r/m

4:
NEG    | 1111 011w | mod 011 r/m
MUL    | 1111 011w | mod 100 r/m
IMUL   | 1111 011w | mod 101 r/m
NOT    | 1111 011w | mod 010 r/m
DIV    | 1111 011w | mod 110 r/m
IDIV   | 1111 011w | mod 111 r/m
INC    | 1111 111w | mod 000 r/m
DEC    | 1111 111w | mod 001 r/m
CALL   | 1111 1111 | mod 010 r/m
CALL   | 1111 1111 | mod 011 r/m
JMP    | 1111 1111 | mod 100 r/m
JMP    | 1111 1111 | mod 101 r/m
PUSH   | 1111 1111 | mod 110 r/m
SHL    | 1101 00vw | mod 100 r/m
SHR    | 1101 00vw | mod 101 r/m
SAR    | 1101 00vw | mod 111 r/m
ROL    | 1101 00vw | mod 000 r/m
ROR    | 1101 00vw | mod 001 r/m
RCL    | 1101 00vw | mod 010 r/m
RCR    | 1101 00vw | mod 011 r/m
POP    | 1000 1111 | mod 000 r/m

5:
ESC    | 1101 1xxx | mod xxx r/m
MOV    | 1000 1100 | mod 0sg r/m
MOV    | 1000 1110 | mod 0sg r/m

6:
ADD    | 0000 010w | data | data if w=1
OR     | 0000 110w | data | data if w=1
ADC    | 0001 010w | data | data if w=1
SBB    | 0001 110w | data | data if w=1
SUB    | 0010 110w | data | data if w=1
AND    | 0010 010w | data | data if w=1
CMP    | 0011 110w | data | data if w=1
XOR    | 0011 010w | data | data if w=1
TEST   | 1010 100w | data | data if w=1
MOV    | 1011 wreg | data | data if w=1

7:
JMP    | 1110 1010 | olo | ohi | slo | shi
CALL   | 1001 1010 | olo | ohi | slo | shi

8:
MOV    | 1010 000w | lo | hi
MOV    | 1010 001w | lo | hi
RET    | 1100 0010 | lo | hi
RET    | 1100 1010 | lo | hi
CALL   | 1110 1000 | lo | hi
JMP    | 1110 1001 | lo | hi

9:
LOOPNE | 1110 0000 | disp
LOOPE  | 1110 0001 | disp
LOOP   | 1110 0010 | disp
JCXZ   | 1110 0011 | disp
JMP    | 1110 1011 | disp
JE     | 0111 0100 | disp
JL     | 0111 1100 | disp
JLE    | 0111 1110 | disp
JB     | 0111 0010 | disp
JBE    | 0111 0110 | disp
JP     | 0111 1010 | disp
JO     | 0111 0000 | disp
JS     | 0111 1000 | disp
JNE    | 0111 0101 | disp
JNL    | 0111 1101 | disp
JNLE   | 0111 1111 | disp
JNB    | 0111 0011 | disp
JNBE   | 0111 0111 | disp
JNP    | 0111 1011 | disp
JNO    | 0111 0001 | disp
JNS    | 0111 1001 | disp

10:
IN     | 1110 010w | port
OUT    | 1110 011w | port
INT    | 1100 1101 | type

11:
AAM    | 1101 0100 | 0000 1010
AAD    | 1101 0101 | 0000 1010

12:
PUSH   | 000s g110
POP    | 000s g111

13:
INC    | 0100 0reg
DEC    | 0100 1reg
PUSH   | 0101 0reg
POP    | 0101 1reg
XCHG   | 1001 0reg

14:
MOVS   | 1010 010w
CMPS   | 1010 011w
SCAS   | 1010 111w
LODS   | 1010 110w
STOS   | 1010 101w
IN     | 1110 110w
OUT    | 1110 111w

15:
RET    | 1100 0011
RET    | 1100 1011
INT 3  | 1100 1100
INTO   | 1100 1110
IRET   | 1100 1111
XLAT   | 1101 0111
NOP    | 1001 0000
CBW    | 1001 1000
CWD    | 1001 1001
WAIT   | 1001 1011
PUSHF  | 1001 1100
POPF   | 1001 1101
SAHF   | 1001 1110
LAHF   | 1001 1111
DAS    | 0010 1111
AAA    | 0011 0111
BAA    | 0010 0111
AAS    | 0011 1111
DAS    | 0010 1111
AAA    | 0011 0111
BAA    | 0010 0111
AAS    | 0011 1111
HLT    | 1111 0100
CMC    | 1111 0101
CLC    | 1111 1000
STC    | 1111 1001
CLI    | 1111 1010
STI    | 1111 1011
CLD    | 1111 1100
STD    | 1111 1101

16:
LOCK   | 1111 0000
REP    | 1111 0010
REPNE  | 1111 0011
</code></figure>

    <h4>Асемблер nasm</h4>

    <p>Ставимо популярний x86 асемблер з підтримкою усіх розширень Intel:
       MMX, SSE, SSE2, SSE3, SSE4.1 SSE4.2, SSE5, KNI, AVX, AVX-2,
       AVX-512, AES, AMX, ADX, TSX, MPX, FMA, VNNI, GFNI, SGX, CET, PKU.
       Ми будемо працювати в x86-64 режимі, з Mach-O вихідним форматом.</p>

<figure><code>$ brew install nasm</code></figure>

    <p>Нуль-програма.</p>

<figure><code>$ cat dasm.asm
           global  _main
           default  rel
           section .text
_main:     ret
           section .data</code></figure>

    <p>Асемблювання, лінковка та запуск.</p>

<figure><code>$ nasm -f macho64 -o dasm.o dasm.asm
gcc -fno-pie -o dasm dasm.o
./dasm
</code></figure>

    <h4>Таблиці</h4>

    <p>Почнемо практикум. Ми будемо робити діспатч по першому байту інструкції ігноруючи поки префікси,
       якшо це префікс ми будемо його просто запам`ятовувати у якості змінної в контексті.
       Будемо робити демонстрацію для перших чотирьох опкодів 00 01 02 03, але покажемо як заповнюється
       таблиця основного діспатча. Тут число 7 означає кількість послідовних комбінаторів мотузок
       які викликаються в процесі парса інструкції та друкують символи на термінал.
       Вже можна зробити покращення виділивши сімки в окрему область вірівняну по границі байту.
       Але тут для простоти вирівняємо і адресу мікрокоду діспатчу і кількість його елементів
       по 8-байтовій границі.
       </p>

<figure><code>opcode: dq inst00, 7, inst01, 7, inst02, 7, inst03, 7
        dq inst04, 7, inst05, 7, inst06, 7, inst07, 7
        dq inst08, 7, inst09, 7, inst0A, 7, inst0B, 7
        dq inst0C, 7, inst0D, 7, inst0E, 7, inst0F, 7</code></figure>

       <p>Кожна адреса з таблиці опкодів містить вирівняну по границі слова послідовність
          кожен елемент якої 16-бітне число, старший (по адресам) байт якого містить параметр,
          а молодший номер функції-комбінатора в таблиці функцій ropes), який друкує певну
          частину візуалізації інструкції (назву, операнд, дужки та навіть line feed).</p>

       <p>0 — парсер mod_rm байт (преамбула);<br>
          1 — друк назви операції з таблиці символьних мнемонік;<br>
          2 — друк відкриття дужки та початку адресації;<br>
          3 — друк відносної адреси, якщо така використовується;<br>
          4 — друк закриття дужки;<br>
          5 — друк коми;<br>
          6 — друк регістру;<br>
          7 — друк A.</p>

        <p>Для байткодів 02 та 03 де порядок аргументів звороній, алгоритм побудови
           зображення інструкції буде видозміненим: (0,1,6,5,2,3,4,7). У випадку
           коли mod=11 такий алгоритм повинен бути наступним: (0,1,6,5,6,7).</p>

<figure><code>inst0:          db 0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0
inst2:          db 0,0,1,0,6,0,5,0,2,0,3,0,4,0,7,0
inst1           equ inst0
inst3           equ inst2</code></figure>

       <h4>Таблиця функцій</h4>

       <p>Для побудови дизасемблера для mod r/m-байтових інструкцій достатньо наступного
          набору комбінаторів:</p>

<figure><code>ropes:          dq parse_mod_rm
                dq print_add
                dq print_rm
                dq print_hex
                dq brace
                dq comma
                dq print_reg
                dq eol
</code></figure>

          <p>У якості прикладу розмістимо в пам'яті секції .data наступнs інструкції.
             Для простоти ми неправильно оброблямо mod r/m байт, та трактуємо поле
             mod без виключення коли mod=11, тобто трактуємо це як відностну трьохбайтову
             адресу (4 та 6 інструкції).
             </p>

<figure><code>machine:        db 0x00, 0b00100101
                db 0x01, 0b10010011, 0x26, 0x25
                db 0x02, 0b01001110, 0x34
                db 0x03, 0b11101110, 0x76, 0x75, 0x77
                db 0x02, 0b10111111, 0x66, 0x65
                db 0x03, 0b11011101, 0x86, 0x85, 0x88

machine.ptr:    dq machine
</code></figure>

            <p>Допоміжні символьні таблиці</p>

<figure><code>rm000:          db '[BX+SI'
rm001:          db '[BX+DI'
rm010:          db '[BP+SI'
rm011:          db '[BP+DI'
rm100:          db '[SI'
rm101:          db '[DI'
rm110:          db '[BP'
rm111:          db '[BX'
rmter:          db ']'
com:            db ','
linefeed:       db 0xa

rm:             dq rm000, rm001, rm010, rm011, rm100, rm101, rm101, rm110, rm111

hexout:         db '+0x01234567890123456789012345678901'
regb:           db "ALCLDLBLAHCHDHBH"
regw:           db "AXCXDXBXSPBPSIDI"
hex:            db '01234567890ABCDEF'</code></figure>

           <p>Синоніми для syscall операційної системи MacOS.</p>

<figure><code>syscall_exit    equ 0x2000001
syscall_write   equ 0x2000004
syscall_open    equ 0x2000005
syscall_close   equ 0x2000006</code></figure>

    <h4>Передача параметрів</h4>

    <p>Основні вимоги до функції: мінімізація використання операцій зі стеком,
       використовувати передачу параметрів через регістри,
       мінімізація звертань до шини,
       бампінг короткими версіями інструкцій (бажано мінімальною довжиною 2 байти),
       функції-мотузочки (ropes) довжиною у розмір конвеєра.</p>

    <h4>Бібліотека функцій</h4>

    <p>Rope #0. Функція обробки байту MOD-R/M</p>

     <p>Перед початком виконання після головного діспатчу ми попадаємо в парсер
        mod r/m байта, де ми завантажуємо адресу поточної інструкції в
        rsi (джерело для дизасемблера) та адресу таблиці опкодів в rdi (ціль дизасемблювання).
        У цій функції ми заглядаємо у попередній байт [rsi-1] чим вносимо цей парсер до класу L(1).
        Попередній байт (опкод інструкці) ми зберігаємо в регістрі BL, а
        байт r/m в регістрі AL. Використовуючи зсув BL на 4 ми визначаємо позицію
        а таблиці опкодів та використовуємо її у відносній адресації [rdi+rbx] щоб
        визначити адресу фукнції-мотузки у яку небхідно модифікувати параметри для
        розпізнання на наступних кроках. В даному випадку йдеться про дві функції
        мотузки from_reg і to_reg, які модифікують аргументи в таблицях inst0 та inst1
        або таблицях inst2 та inst3. Ці функції записують в байт-аргумент фукнці-мотузки
        наступні параметри: 1) для фукнкції регістру — номер регістру з байту mod r/m у
        молодих 4-бітах AL та розрядність інструкції у 5-му біті AL (береться з байткоду),
        2) для r/m відображення — значення mod з байту яке індексує вигляд адресації у масиві rm,
        3) для функції відображення відносної адреси — кількість байт які небходно прочитати
        з потоку інструкцій (значення поля mod). Тому кожна з фунції 7 та 8 пише в кожні з цих трох місць,
        по суті готує майбутні параметри для лінійного проходження. Після виконання функція
        збільшує адресу поточної інструкції.
        </p>

<figure><code>parse_mod_rm:   mov rsi, [machine.ptr]
                mov rdi, opcodes
                mov al, [rsi]
                mov ah, [rsi-1]
                mov bl, ah
                mov cl, 4
                shl ah, cl
                shl bl, cl
                mov rdi, [rdi+rbx]
                dec cl
                mov bl, al
                mov dl, al
                shr bl, cl
                add cl, cl
                shr al, cl
                inc cl
                and bl, cl
                and dl, cl
                or bl, ah
                inc cl
                add cl, cl
mem:            test bl, cl
                jnz odd
                call from_reg
                jmp quit_rm
odd:            call to_reg
quit_rm:        inc qword [machine.ptr]
                mov rax, 2
                ret</code></figure>

<p>Rope #1. Функція друку операції</p>

<figure><code>
print_add:
                mov rsi, add
                mov dl, 4
                call write
                mov rax, 2
                ret</code></figure>

<p>Rope #2. Функція друку адресації памʼяті</p>

<figure><code>
print_rm:       and rax, 255
                mov rdi, rax
                shl rdi, 3
                mov rbx, rm
                mov rsi, [rbx+rdi]
                mov rbx, rd
                mov dl, [rbx+rdi]
                call write
                mov rax, 2
                ret</code></figure>


<p>Rope #3. Функція друку шістнадцяткового числа</p>

<figure><code>
print_hex:      push rax
                cmp rax, 0
                jz empty
                xor edx, edx
                mov edx, eax
                mov rdi, hex
                mov rsi, [machine.ptr]
                mov rbp, hexout
                mov eax, edx
                shl eax, 1
                add al, 3
                mov qword [hexout.len], rax
                dec eax
                add rbp, rax
pair:           mov bl, [rsi]
                and ebx, 15
                mov al, [rbx+rdi]
                mov [rbp], al
                dec rbp
                mov bl, [rsi]
                shr ebx, 4
                and ebx, 15
                mov al, [rbx+rdi]
                mov [rbp], al
                dec rbp
                inc rsi
                dec edx
                jne pair
                mov rdx, qword [hexout.len]
                mov rax, syscall_write
                mov rsi, hexout
                mov rdi, 1
                syscall
empty:          pop rdx
                add qword [machine.ptr], rdx
                mov rax, 2
                ret</code></figure>

<p>Rope #4. Функція друку дужки</p>

<figure><code>brace:          mov rsi, rmter
                mov dl, 1
                call write
                mov rax, 2
                ret</code></figure>

<p>Rope #5. Функція друку коми</p>

<figure><code>comma:          mov rsi, com
                mov dl, 1
                call write
                mov rax, 2
                ret</code></figure>

<p>Rope #6. Функція друку регістра</p>

<figure><code>print_reg:      test al, 16
                jnz w
                mov rsi, regb
                jmp e
w:              mov rsi, regw
e:              and al, 15
                shl al, 1
                add rsi, rax
                mov dl, 2
                call write
                mov rax, 2
                ret

</code></figure>

<p>Rope #7. Функція-патч для регістрових вихідних операндів</p>

<figure><code>from_reg:       mov [rdi+7], al   ; mod
                mov [rdi+13], bl  ; reg
                mov [rdi+5], dl   ; r/m
                ret</code></figure>

<p>Rope #8. Функція-патч для регістрових вхідних операндів</p>

<figure><code>to_reg:         mov [rdi+11], al  ; mod
                mov [rdi+5], bl   ; reg
                mov [rdi+9], dl   ; r/m
                ret</code></figure>


    <h4>Головна програма</h4>


     <p>У головній програмі ми вимушені скористатися стеком для приховування регістра
        rdx та rdi у процесі виконання функцій мотузок. Саме в цій функції ми передаємо
        однобайтові паратери функціям через регістр AL, а регістр rsi в циклі завжди
        виставляється заново в адресу мотузок для відносної адресації по [rsi+rbx],
        де rbx=8*i, де i — номер функції мотузки в таблиці функцій. Після виходу з функції
        мотузки ми беремо то що вернулося в rax (використовуємо як вихідний результат функції),
        та збільшуємо на це число адресу наступної функції мотузки rdi (тобто використовуємо
        результат для обчислення адреси де знаходиться адреса наступної функції-мотузки).
        Регістр rdx використовуємо як лічильник циклу (в даному випадку ми крутимо число 7),
        та кожен раз декриментуємо його. Адресу display.ptr використовуємо як лінільник
        дизасембльованих інструкцій.
        </p>

<figure><code>_main:          mov rsi, [machine.ptr]
                xor rbx, rbx
                inc qword [machine.ptr]
                mov bl, [rsi]
                shl rbx, 4
                mov rsi, opcodes
                mov rdx, [rsi+rbx+8]
                mov rdi, [rsi+rbx]
line:           push rdi
                push rdx
                xor rbx, rbx
                mov bl, [rdi]
                shl bl, 3
                mov rsi, ropes
                mov al, [rdi+1]
                call [rsi+rbx]
                pop rdx
                pop rdi
                add rdi, rax
                shr rax, 1
                sub rdx, rax
                jnz line
                call eol
                dec qword [display.ptr]
                jnz _main
                mov rax, 0x2000001
                xor rdi, rdi
                syscall
                ret
</code></figure>

    <h4>Виконання</h4>

    <figure><code>
nasm -f macho64 -o dasm.o dasm.asm
gcc -fno-pie -o dasm dasm.o
be dasm
    </code></figure>

<p>[:0x3d2f] [d]</p>


<figure><img src="img/main.png" width=800></figure>

    <figure><code>
$ ./dasm
ADD [DI],AH
ADD DX,[BP+DI+0x2526]
ADD [DI+0x34],CL
ADD BP,[DI+0x777576]
ADD [BP+0x6566],BH
ADD BX,[DI+0x888586]
    </code></figure>

    <h4>DYI PC XT</h4>

       <p>На курсі "КВ-123-16 Схемотехніка" вивчається як будувати XT комп`ютери та збирати їх самому,
          на прикладі платформи PC/104. Тут показана повна елементна база для побудови ХТ комп`ютера
          для максимального та мінімального режимів.</p>

       <figure><table cellspacing=10 bgcolor=white>
       <thead>
       <th>№</th><th>Чіп</th><th>Опис</th>
       </thead>
       <tbody>
       <tr><td>1</td><td><a href="intel/XT/2142.pdf">2142</a></td><td>1024 x 4-bit SRAM</td></tr>
       <tr><td>2</td><td><a href="intel/XT/2764.pdf">2764</a></td><td>8K EPROM</td></tr>
       <tr><td>3</td><td><a href="intel/XT/6264.pdf">6264</a></td><td>8K SRAM</td></tr>
       <tr><td>4</td><td><a href="intel/XT/8086.pdf">8086</a></td><td>16-bit bus CPU</td></tr>
       <tr><td>5</td><td><a href="intel/XT/8087.pdf">8087</a></td><td>16-bit bus MPU</td></tr>
       <tr><td>6</td><td><a href="intel/XT/8088.pdf">8088</a></td><td>8-bit bus CPU</td></tr>
       <tr><td>7</td><td><a href="intel/XT/8089.pdf">8089</a></td><td>16-bit bus MPU</td></tr>
       <tr><td>8</td><td><a href="intel/XT/8155.pdf">8155</a></td><td>256 x 8-bit SRAM, I/O, Timer</td></tr>
       <tr><td>9</td><td><a href="intel/XT/8212.pdf">8212</a></td><td>8-bit I/O port</td></tr>
       <tr><td>A</td><td><a href="intel/XT/8214.pdf">8214</a></td><td>PICU</td></tr>
       <tr><td>A</td><td><a href="intel/XT/8254.pdf">8254</a></td><td>PIC 8086</td></tr>
       <tr><td>B</td><td><a href="intel/XT/8257.pdf">8257</a></td><td>DMA</td></tr>
       <tr><td>C</td><td><a href="intel/XT/8282.pdf">8282</a></td><td>8-bit latch</td></tr>
       <tr><td>D</td><td><a href="intel/XT/8284.pdf">8284</a></td><td>Clock generator</td></tr>
       <tr><td>E</td><td><a href="intel/XT/8286.pdf">8286</a></td><td>Transeiver</td></tr>
       <tr><td>F</td><td><a href="intel/XT/8288.pdf">8288</a></td><td>Bus controller</td></tr>
       <tr><td>G</td><td><a href="intel/XT/8289.pdf">8289</a></td><td>Bus arbiter</td></tr>
       <tr><td>H</td><td><a href="intel/XT/74LS244.pdf">74LS244</a></td><td>Octal buffer</td></tr>
       <tr><td>I</td><td><a href="intel/XT/74LS245.pdf">74LS245</a></td><td>Bi-directional octal buffer</td></tr>
       <tr><td>J</td><td><a href="intel/XT/74LS373.pdf">74LS373</a></td><td>8-bit latch</td></tr>
       </tbody></table></figure>

    <p><b>Приклад компоновки процесору 8088 у мінімальному режимі </b></p>

 <figure><a href="pdf/April20-03_8088SBC.pdf"><img src="img/xt.png"></a></figure>

    <h4>Код</h4>

    <p>Репозиторій проекту <a href="https://github.com/5HT/xt-dasm">github.com/5HT/xt-dasm</a>.</P>

    <h4>Рекомендована література</h4>

    <p>[1]. Rector, Alexy. 8086 Book. Berkley. 1980.<br>
       [2]. Brey. The Intel Microprocessors. 2009.<br>
       [3]. Mathur. 8086: Architecture, Programming and Interfacing. Delhi. 2011.<br>
       [4]. Intel Mnemonics. 1980.</p>

    <h4>Альтернативний практикум на асемблері</h4>

    <p>Розробка дизасемблера ARM або RISC-V на вибір.<br>
       Розробка LISP інтерпретатора.</p>

    <h4>Наступні кроки</h4>

    <p>Імітаційне моделювання (розробка емулятора) та
       математичне моделювання (доведення коректності
       бінарного коду мікропроцесора). Нас цікавитимуть такі моделі,
       які враховують мультиагентний доступ до шини та операції LOCK.</p>

    <br><center>&dot;</center>

    <div id="utterances" class="utterances" > </div>
    <script src="https://utteranc.es/client.js" repo="5HT/tonpa.guru"
            issue-number="26" theme="github-light" crossorigin="anonymous" async> </script>

</section>
</main>
<footer>Максим Сохацький, ДП «ІНФОТЕХ»</footer>
</body>
</html>