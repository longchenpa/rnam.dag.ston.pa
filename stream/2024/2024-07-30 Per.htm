<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2024-07-30 Per</title>
    <link rel="stylesheet" href="../../blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2024-07-30</a>
</nav>
<main>
    <section>

        <h3>Per</h3>

<p align=right>TL;DR Фірмовий синтаксис Групоїд Інфініті для MLTT ядра в нормальній формі Бакуса-Наура для LR(1) парсер генераторів загалом, і Menhir/OCaml та LALRPOP/Rust зокрема.</p>

<figure><code>
use crate::ast::Expression;
use crate::ast::Branch;
use crate::ast::Pattern;
use crate::ast::Typed;
use crate::ast::Per;
use crate::ast::Value;

grammar;

// Copyright (c) Groupoid Infinity

Name: String = { r"[a-zA-Z_][a-zA-Z_\d]*" => &lt;>.to_string() };
Variable: Per = { &lt;n:Name> => Per::Var(n), };
Universe: Per = { &lt;n:r"\*[\d]+"> => Per::Type(u32::from_str_radix(&n[1..],10).unwrap()),
                  &lt;n:r"\*"> => Per::Type(0), };

Vars: Vec&lt;Pattern> = {
   &lt;n:Name> => vec![Pattern::Var(n)],
   &lt;n:Name> &lt;v:Vars> =>
       { let mut r = v.clone();
         r.append(&mut vec![Pattern::Var(n)]); r }, };

Telescope: Vec&lt;(Pattern,Expression)> = {
   "(" &lt;v:Vars> &lt;m:":"> &lt;t:Expr> ")" => vec![(v[0].clone(),t)],
   "(" &lt;v:Vars> &lt;m:":"> &lt;t:Expr> ")" &lt;x:Telescope> =>
       { let mut r = x.clone(); r.append(&mut vec![(v[0].clone(),t)]); r } };

Lambda: Per = { "λ" "(" &lt;v:Vars> &lt;m:":"> &lt;t:Expr> ")" &lt;c:","> &lt;e:Exp1> =>
                        Per::Lambda(v[0].clone(),None,Box::new(e)), };
Pi:     Per = { "Π" "(" &lt;v:Vars> &lt;m:":"> &lt;t:Expr> ")" &lt;c:","> &lt;e:Exp1> =>
                        Per::Pi(Typed::new(v[0].clone(),t), Box::new(e)), };
Sigma:  Per = { "Σ" "(" &lt;v:Vars> &lt;m:":"> &lt;t:Expr> ")" &lt;c:","> &lt;e:Exp1> =>
                        Per::Sigma(Typed::new(v[0].clone(),t), Box::new(e)), };

Exp1: Per = { Lambda, Pi, Sigma, Exp2 };
Exp2: Per = { &lt;l:Exp2> &lt;r:Exp3> => Per::Application(Box::new(l),Box::new(r)), &lt;x:Exp3> => x };
Exp3: Per = { Universe, Variable, &lt;l:"("> &lt;e:Exp4> &lt;r:")"> => e, };
Exp4: Per = { &lt;l:Exp1> "," &lt;r:Exp4> => Per::Pair(Box::new(l),Box::new(r)), &lt;x:Exp1> => x };

pub Expr: Per = { Exp1 };

</code></figure>

</section>
</main>
<footer>Максим Сохацький</footer>
</body>
</html>
