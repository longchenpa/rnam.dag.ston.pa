<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2024-10-29 EST</title>
    <link rel="stylesheet" href="../../blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2024-10-29</a>
</nav>
<main>
    <section>
        <h3>EST 7030</h3>

        <p>TL;DR: Enrollment over Secure Transport.</p>

        <h3>Вступ</h3>

<figure><img src="https://authority.erp.uno/priv/design/ca-shaders.png"></figure>

        <h3>Центр сертифікації</h3>

<figure><code>
├── application.ex
├── agreement
│   ├── EC
│   │   ├── curve.ex
│   │   ├── integer.ex
│   │   ├── jacobian.ex
│   │   └── point.ex
│   └── ecc.ex
├── derivation
│   ├── hkdf.ex
│   └── kdf.ex
├── encryption
│   ├── aes.ex
│   └── cms.ex
├── oid
│   ├── alg.ex
│   ├── at.ex
│   ├── ce.ex
│   ├── kp.ex
│   ├── nis.ex
│   └── x962.ex
├── services
│   ├── cmc.ex
│   ├── cmp.ex
│   ├── csr.ex
│   ├── est.ex
│   ├── http
│   │   ├── get.ex
│   │   └── post.ex
│   ├── ocsp.ex
│   └── tsp.ex
└── signing
    ├── CAdES.ex
    ├── ecdsa.ex
    └── ecdsa_otp.ex
</code></figure>

<figure><code>
defmodule CA.Mixfile do
  use Mix.Project
  def application(), do: [ mod: {CA, []}, extra_applications: [:x509,:bandit,:plug]]
  def project() do
    [
      app: :ca,
      version: "5.10.4",
      description: "CA  CXC 138 21 Certificate Authority",
      package: [
        name: :ca,
        files: ~w(config src include priv lib mix.exs LICENSE README.md),
        licenses: ["ISC"],
        maintainers: ["Namdak Tonpa"],
        links: %{"GitHub" => "https://github.com/synrc/ca"}
      ],
      deps: [
        {:jason, "~> 1.2"},
        {:plug, "~> 1.15.3"},
        {:bandit, "~> 1.0"},
        {:ex_doc, ">= 0.0.0", only: :dev},
        {:x509, "~> 0.8.7"}
      ]
    ]
  end
end
</code></figure>


        <h3>Регламент взаємодії</h3>

        <h4>GET /.well-known/est/ca</h4>

<figure><code>
  def get(conn, [], "Authority", [], "CA") do
      body = :base64.encode(CA.CSR.read_ca_public())
      conn |> put_resp_content_type("application/pkix-cert")
           |> put_resp_header("Content-Transfer-Encoding", "base64")
           |> put_resp_header("Content-Length", Integer.to_string(byte_size(body)))
           |> resp(200, body)
           |> send_resp()
  end
</code></figure>

        <h4>GET /.well-known/est/cacerts</h4>

<figure><code>
  def get(conn, [], "Authority", [], "CMS") do
      ca = CA.CSR.read_ca_public()
      {:ok, cacert} = :"PKIX1Explicit-2009".decode(:Certificate, ca)
      ci = {:ContentInfo, {1, 2, 840, 113549, 1, 7, 2},
             {:SignedData, :v1, [],
               {:EncapsulatedContentInfo, {1, 2, 840, 113549, 1, 7, 1}, :asn1_NOVALUE},
                 [certificate: cacert], [], []}}
      {:ok, cms} = :"CryptographicMessageSyntax-2010".encode :ContentInfo, ci
      body = :base64.encode cms
      conn |> put_resp_content_type("application/pkcs7-mime")
           |> put_resp_header("Content-Transfer-Encoding", "base64")
           |> put_resp_header("Content-Length", Integer.to_string(byte_size(body)))
           |> resp(200, body)
           |> send_resp()
  end
</code></figure>

        <h4>GET /.well-known/est/csrattrs</h4>

<figure><code>
  def get(conn, [], "Authority", [], "ABAC") do
      body = :base64.encode(CA.EST.csrattributes())
      conn |> put_resp_content_type("application/csrattrs")
           |> put_resp_header("Content-Transfer-Encoding", "base64")
           |> put_resp_header("Content-Length", Integer.to_string(byte_size(body)))
           |> resp(200, body)
           |> send_resp()
  end
</code></figure>

        <h4>POST /.well-known/est/simpleenroll</h4>

<figure><code>
</code></figure>

        <h4>POST /.well-known/est/simplereenroll</h4>

<figure><code>
</code></figure>

        <h4>POST /.well-known/est/serverkeygen</h4>

<figure><code>
</code></figure>

        <h4>POST /.well-known/est/fullcmc</h4>

<figure><code>
</code></figure>

        <h3>Додатки</h3>

        <h4>Додаток 1. Атрибути PKCS-10 CSR запиту</h4>

<figure><code>
defmodule CA.AT do
  @moduledoc "CA CSR Attributes OIDs."
  def oid(:"id-at-rsaEncryption"),                        do: {1, 2, 840, 113549, 1, 1, 1}
  def oid(:"id-at-sha1WithRSAEncryption"),                do: {1, 2, 840, 113549, 1, 1, 5}
  def oid(:"id-at-sha512-256WithRSAEncryption"),          do: {1, 2, 840, 113549, 1, 1, 16}
  def oid(:"id-at-dhKeyAgreement"),                       do: {1, 2, 840, 113549, 1, 3, 1}
  def oid(:"id-at-emailAddress"),                         do: {1, 2, 840, 113549, 1, 9, 1}
  def oid(:"id-at-unstructuredName"),                     do: {1, 2, 840, 113549, 1, 9, 2}
  def oid(:"id-at-contentType"),                          do: {1, 2, 840, 113549, 1, 9, 3}
  def oid(:"id-at-messageDigest"),                        do: {1, 2, 840, 113549, 1, 9, 4}
  def oid(:"id-at-signingTime"),                          do: {1, 2, 840, 113549, 1, 9, 5}
  def oid(:"id-at-counterSignature"),                     do: {1, 2, 840, 113549, 1, 9, 6}
  def oid(:"id-at-challengePassword"),                    do: {1, 2, 840, 113549, 1, 9, 7}
  def oid(:"id-at-unstructuredAddress"),                  do: {1, 2, 840, 113549, 1, 9, 8}
  def oid(:"id-at-extendedCertificateAttributes"),        do: {1, 2, 840, 113549, 1, 9, 9}
  def oid(:"id-at-issuerAndSerialNumber"),                do: {1, 2, 840, 113549, 1, 9, 10}
  def oid(:"id-at-passwordCheck"),                        do: {1, 2, 840, 113549, 1, 9, 11}
  def oid(:"id-at-publicKey"),                            do: {1, 2, 840, 113549, 1, 9, 12}
  def oid(:"id-at-signingDescription"),                   do: {1, 2, 840, 113549, 1, 9, 13}
  def oid(:"id-at-extensionRequest"),                     do: {1, 2, 840, 113549, 1, 9, 14}
  def oid(:"id-at-smimeCapabilities"),                    do: {1, 2, 840, 113549, 1, 9, 15}
</code></figure>

        <h4>Додаток 2. Розширення сертифікату</h4>

<figure><code>
defmodule CA.CE do
  @moduledoc "CA Certificate Extensions OIDs."
  def oid(:"id-ce-subjectDirectoryAttributes"),   do: {2, 5, 29, 9}
  def oid(:"id-ce-subjectKeyIdentifier"),         do: {2, 5, 29, 14}
  def oid(:"id-ce-keyUsage"),                     do: {2, 5, 29, 15}
  def oid(:"id-ce-privateKeyUsagePeriod"),        do: {2, 5, 29, 16}
  def oid(:"id-ce-subjectAltName"),               do: {2, 5, 29, 17}
  def oid(:"id-ce-issuerAltName"),                do: {2, 5, 29, 18}
  def oid(:"id-ce-basicConstraints"),             do: {2, 5, 29, 19}
  def oid(:"id-ce-cRLNumber"),                    do: {2, 5, 29, 20}
  def oid(:"id-ce-reasonCode"),                   do: {2, 5, 29, 21}
  def oid(:"id-ce-expirationDate"),               do: {2, 5, 29, 22}
  def oid(:"id-ce-holdInstructionCode"),          do: {2, 5, 29, 23}
  def oid(:"id-ce-invalidityDate"),               do: {2, 5, 29, 24}
  def oid(:"id-ce-deltaCRLIndicator"),            do: {2, 5, 29, 27}
  def oid(:"id-ce-issuingDistributionPoint"),     do: {2, 5, 29, 28}
  def oid(:"id-ce-certificateIssuer"),            do: {2, 5, 29, 29}
  def oid(:"id-ce-nameConstraints"),              do: {2, 5, 29, 30}
  def oid(:"id-ce-cRLDistributionPoints"),        do: {2, 5, 29, 31}
  def oid(:"id-ce-certificatePolicies"),          do: {2, 5, 29, 32}
  def oid(:"id-ce-policyMappings"),               do: {2, 5, 29, 33}
  def oid(:"id-ce-authorityKeyIdentifier"),       do: {2, 5, 29, 35}
  def oid(:"id-ce-policyConstraints"),            do: {2, 5, 29, 36}
  def oid(:"id-ce-extKeyUsage"),                  do: {2, 5, 29, 37}
  def oid(:"id-ce-authorityAttributeIdentifier"), do: {2, 5, 29, 38}
  def oid(:"id-ce-roleSpecCertIdentifier"),       do: {2, 5, 29, 39}
  def oid(:"id-ce-cRLStreamIdentifier"),          do: {2, 5, 29, 40}
  def oid(:"id-ce-basicAttConstraints"),          do: {2, 5, 29, 41}
  def oid(:"id-ce-delegatedNameConstraints"),     do: {2, 5, 29, 42}
  def oid(:"id-ce-timeSpecification"),            do: {2, 5, 29, 43}
  def oid(:"id-ce-crlScope"),                     do: {2, 5, 29, 44}
  def oid(:"id-ce-statusReferrals"),              do: {2, 5, 29, 45}
  def oid(:"id-ce-freshestCRL"),                  do: {2, 5, 29, 46}
  def oid(:"id-ce-orderedList"),                  do: {2, 5, 29, 47}
  def oid(:"id-ce-attributeDescriptor"),          do: {2, 5, 29, 48}
  def oid(:"id-ce-userNotice"),                   do: {2, 5, 29, 49}
  def oid(:"id-ce-sOAIdentifier"),                do: {2, 5, 29, 50}
  def oid(:"id-ce-baseUpdateTime"),               do: {2, 5, 29, 51}
  def oid(:"id-ce-acceptableCertPolicies"),       do: {2, 5, 29, 52}
  def oid(:"id-ce-deltaInfo"),                    do: {2, 5, 29, 53}
  def oid(:"id-ce-inhibitAnyPolicy"),             do: {2, 5, 29, 54}
  def oid(:"id-ce-targetingInformation"),         do: {2, 5, 29, 55}
  def oid(:"id-ce-noRevAvail"),                   do: {2, 5, 29, 56}
  def oid(:"id-ce-acceptablePrivilegePolicies"),  do: {2, 5, 29, 57}
  def oid(:"id-ce-toBeRevoked"),                  do: {2, 5, 29, 58}
  def oid(:"id-ce-revokedGroups"),                do: {2, 5, 29, 59}
  def oid(:"id-ce-expiredCertsOnCRL"),            do: {2, 5, 29, 60}
  def oid(:"id-ce-indirectIssuer"),               do: {2, 5, 29, 61}
  def oid(:"id-ce-noAssertion"),                  do: {2, 5, 29, 62}
  def oid(:"id-ce-aAissuingDistributionPoint"),   do: {2, 5, 29, 63}
  def oid(:"id-ce-issuedOnBehalfOf"),             do: {2, 5, 29, 64}
  def oid(:"id-ce-singleUse"),                    do: {2, 5, 29, 65}
  def oid(:"id-ce-groupAC"),                      do: {2, 5, 29, 66}
  def oid(:"id-ce-allowedAttributeAssignments"),  do: {2, 5, 29, 67}
  def oid(:"id-ce-attributeMappings"),            do: {2, 5, 29, 68}
  def oid(:"id-ce-holderNameConstraints"),        do: {2, 5, 29, 69}
  def oid(:"id-ce-authorizationValidation"),      do: {2, 5, 29, 70}
  def oid(:"id-ce-protRestrict"),                 do: {2, 5, 29, 71}
  def oid(:"id-ce-subjectAltPublicKeyInfo"),      do: {2, 5, 29, 72}
  def oid(:"id-ce-altSignatureAlgorithm"),        do: {2, 5, 29, 73}
  def oid(:"id-ce-altSignatureValue"),            do: {2, 5, 29, 74}
  def oid(:"id-ce-associatedInformation"),        do: {2, 5, 29, 75}
</code></figure>

       <br><center>&dot;</center>

<hr>

     <p>
     [1]. <a href="https://www.cisco.com/c/dam/en_us/about/doing_business/trust-center/docs/public-key-infrastructure-provisioning-with-est.pdf">Cisco. PKI: Simplify Certificate Provisioning with EST. 2016</a><br>
     [2]. <a href="https://authority.erp.uno">SYNRC CA</a><br>
     </p>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2024</footer>
</body>
</html>
